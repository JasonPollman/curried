{"version":3,"sources":["index.js"],"names":["cloneArray","arr","clone","ind","length","implementShuffle","dupe","top","rand","curr","Math","random","shuffle","size"],"mappings":"oKAKO,QAASA,CAAAA,UAAT,CAAoBC,CAApB,CAAyB,IACxBC,CAAAA,CAAK,CAAG,EADgB,CAE1BC,CAAG,CAAGF,CAAG,CAACG,MAFgB,CAI9B,MAAOD,CAAG,EAAV,EAAcD,CAAK,CAACC,CAAD,CAAL,CAAaF,CAAG,CAACE,CAAD,CAA9B,CACA,MAAOD,CAAAA,CACR,CAOM,QAASG,CAAAA,gBAAT,CAA0BJ,CAA1B,CAA+B,IAC9BK,CAAAA,CAAI,CAAGN,UAAU,CAACC,CAAD,CADa,CAGhCM,CAAG,CAAGN,CAAG,CAACG,MAHsB,CAIhCI,CAAI,CAAGD,CAJyB,CAKhCE,CAAI,CAAGF,CALyB,CAOpC,MAAO,EAAEA,CAAT,CAAc,CACZC,CAAI,CAAiC,CAA9B,CAACE,IAAI,CAACC,MAAL,IAAiBJ,CAAG,CAAG,CAAvB,CAAR,CACAE,CAAI,CAAGH,CAAI,CAACE,CAAD,CAAX,CACAF,CAAI,CAACE,CAAD,CAAJ,CAAaF,CAAI,CAACC,CAAD,CAAjB,CACAD,CAAI,CAACC,CAAD,CAAJ,CAAYE,CACb,CAED,MAAOH,CAAAA,CACR,CAoBc,QAASM,CAAAA,OAAT,CAAiBX,CAAjB,CAAsB,CACnC,GAAMY,CAAAA,CAAI,CAAGZ,CAAG,EAAIA,CAAG,CAACG,MAAxB,CACA,GAAW,CAAP,CAAAS,CAAJ,CAAc,MAAOR,CAAAA,gBAAgB,CAACJ,CAAD,CAAvB,CACd,MAAgB,EAAT,GAAAY,CAAI,CAAS,CAACZ,CAAG,CAAC,CAAD,CAAJ,CAAT,CAAoB,EAChC","sourceRoot":"packages/categories/array/shuffle","sourcesContent":["/**\n * Shallow clones an array.\n * @param {Array} arr The array to clone.\n * @returns {Array} The newly cloned array.\n */\nexport function cloneArray(arr) {\n  const clone = [];\n  let ind = arr.length;\n\n  while (ind--) clone[ind] = arr[ind];\n  return clone;\n}\n\n/**\n * Implements the \"Fisher-Yates\" shuffle algorithm.\n * @param {Array} arr The array to be shifted.\n * @returns {Array} The newly shifted array.\n */\nexport function implementShuffle(arr) {\n  const dupe = cloneArray(arr);\n\n  let top = arr.length;\n  let rand = top;\n  let curr = top;\n\n  while (--top) {\n    rand = (Math.random() * (top + 1)) | 0;\n    curr = dupe[rand];\n    dupe[rand] = dupe[top];\n    dupe[top] = curr;\n  }\n\n  return dupe;\n}\n\n/**\n * Shuffles an array using the \"Fisher-Yates\" shuffle algorithm.\n *\n * @name shuffle\n * @param {Array} arr The array to be shuffled.\n * @returns {Array} A shuffled array.\n *\n * @category array\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { shuffle } from '@foldr/shuffle';\n *\n * shuffle([1, 2, 3, 4]); // => [2, 4, 3, 1]\n * shuffle([1, 2, 3, 4]); // => [3, 4, 1, 2]\n */\nexport default function shuffle(arr) {\n  const size = arr && arr.length;\n  if (size > 1) return implementShuffle(arr);\n  return size === 1 ? [arr[0]] : [];\n}\n"]}