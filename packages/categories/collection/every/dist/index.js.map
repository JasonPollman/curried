{"version":3,"sources":["index.js"],"names":["$$empty","$$unwrap","results","x","$$results","$$handler","context","iteratee","i","value","key","collection","capped","BREAK"],"mappings":"2FAAA,mF,iWAwCe,8BAAS,CACtBA,OAAO,CAAE,sBADa,CAEtBC,QAAQ,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAACC,CAAZ,CAFK,CAGtBC,SAAS,CAAE,mBAAO,CAAED,CAAC,GAAH,CAAP,CAHW,CAItBE,SAAS,CAAE,WAACC,CAAD,CAAUJ,CAAV,CAAmBK,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CACpE,GAAIL,CAAO,EAAIA,CAAO,CAACM,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA1D,CAAoF,CAClF,MACD,CAGDT,CAAO,CAACC,CAAR,IACA,MAAOU,wBACR,CAZqB,CAAT,C","sourceRoot":"packages/categories/collection/every","sourcesContent":["import iterator, { BREAK } from '@foldr/internal-iterator';\n\n/**\n * This function is similar to `Array#every` except that it works for collections and\n * guards against bad input.\n *\n * A collection is an Array, Object, String, Map, Set, or Arguments object.\n *\n * Iterates over `collection`, calling `predicate` for each item in the collection. If `predicate`\n * returns falsy, iteration is broken and `false` is returned. Otherwise `true` is returned.\n *\n * Predicate functions are called with the signature `predicate(value, key, collection)`, where:\n * - `value` is the current item in the collection being iterated over.\n * - `key` is the key of the current item in the collection being iterated over.\n * - `collection` is the passed in collection.\n *\n * @name every\n * @param {Array|Object|String|Map|Set|Arguments} collection The collection to iterate over.\n * @param {function} predicate The predicate iteratee function.\n * @returns {boolean} True if all items in the collection return true\n * for `predicate`, false otherwise.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { every } from '@foldr/all';\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * every([1, 2, 3], isEven);            // => false\n * every([2, 4, 6], isEven);            // => true\n *\n * every({ a: 1, b: 2, c: 3 }, isEven); // => false\n * every({ a: 2, b: 4, c: 6 }, isEven); // => true\n */\nexport default iterator({\n  $$empty: () => true,\n  $$unwrap: results => results.x,\n  $$results: () => ({ x: true }),\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? iteratee(value) : iteratee(value, key, collection)) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    results.x = false;\n    return BREAK;\n  },\n});\n"]}