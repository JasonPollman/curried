{"version":3,"sources":["index.js"],"names":["EmptyArray","$$empty","$$results","$$handler","context","results","iteratee","i","value","key","collection","capped","length"],"mappings":"2FAAA,kF,2EAEMA,CAAAA,UAAU,CAAG,iBAAM,EAAN,C,UAqCJ,8BAAS,CACtBC,OAAO,CAAED,UADa,CAEtBE,SAAS,CAAEF,UAFW,CAGtBG,SAAS,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CACpE,GAAIN,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA1D,CAAoF,CAElFL,CAAO,CAACA,CAAO,CAACO,MAAT,CAAP,CAA0BJ,CAC3B,CACF,CARqB,CAAT,C","sourceRoot":"packages/categories/collection/filter","sourcesContent":["import iterator from '@foldr/internal-iterator';\n\nconst EmptyArray = () => [];\n\n/**\n * This function is similar to `Array#filter` except that is works for collections and guards\n * against bad input.\n *\n * A collection is an Array, Object, String, Map, Set, or Arguments object.\n *\n * Iterates over `collection`, calling `filterFn` for each item in the collection. If\n * `filterFn` returns `true`, the value will be kept in the returned array, otherwise\n * the value is omitted from the returned array.\n *\n * Filter functions are called with the signature `filterFn(value, key, collection)`, where:\n * - `value` is the current item in the collection being iterated over.\n * - `key` is the key of the current item in the collection being iterated over.\n * - `collection` is the passed in collection.\n *\n * @param {Array|Object|String|Map|Set|Arguments} collection The collection to iterate over.\n * @param {function} filterFn The iteratee function to use while filtering.\n * @returns {Array} The results of mapping `collection` to `filterFn`.\n *\n * @arity 2\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { filter } from '@foldr/all';\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * filter([1, 2, 3], isEven);            // => [2]\n * filter({ a: 1, b: 2, c: 3 }, isEven); // => [2]\n */\nexport default iterator({\n  $$empty: EmptyArray,\n  $$results: EmptyArray,\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? iteratee(value) : iteratee(value, key, collection)) {\n      // eslint-disable-next-line no-param-reassign\n      results[results.length] = value;\n    }\n  },\n});\n"]}