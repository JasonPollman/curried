{"version":3,"sources":["index.js"],"names":["$$empty","$$unwrap","results","x","$$results","$$prepare","getIteratee","$$handler","context","iteratee","i","value","key","collection","capped","BREAK"],"mappings":"qqBA2Ce,8BAAS,CACtBA,OAAO,CAAE,cADa,CAEtBC,QAAQ,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAACC,CAAZ,CAFK,CAGtBC,SAAS,CAAE,mBAAO,CAAED,CAAC,OAAH,CAAP,CAHW,CAItBE,SAAS,CAAEC,yBAJW,CAKtBC,SAAS,CAAE,WAACC,CAAD,CAAUN,CAAV,CAAmBO,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CACpE,GAAIL,CAAO,EAAIA,CAAO,CAACM,MAAnB,CAA4B,CAACL,CAAQ,CAACE,CAAD,CAArC,CAA+C,CAACF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA5D,CAAsF,CACpF,MACD,CAGDX,CAAO,CAACC,CAAR,CAAYS,CAAZ,CACA,MAAOG,wBACR,CAbqB,CAAT,C","sourceRoot":"packages/categories/collection/find-key","sourcesContent":["import getIteratee from '@foldr/internal-iteratee';\nimport iterator, { BREAK } from '@foldr/internal-iterator';\n\n/**\n * This function is similar to `Array#findIndex` except that is works for collections and guards\n * against bad input.\n *\n * A collection is an Array, Object, String, Map, Set, or Arguments object.\n *\n * Iterates over `collection`, calling `iteratee` for each item in the collection. If\n * `iteratee` returns `true`, the current key will be returned. If all items are exhausted,\n * `undefined` is returned.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where:\n * - `value` is the current item in the collection being iterated over.\n * - `key` is the key of the current item in the collection being iterated over.\n * - `collection` is the passed in collection.\n *\n * @name findKey\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} filterer The iteratee function to use while finding a key.\n * @returns {any} The found key (or undefined).\n *\n * @arity 2\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { findKey } from '@foldr/all';\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * findKey([1, 2, 3], isEven);            // => 1\n * findKey({ a: 1, b: 2, c: 3 }, isEven); // => 'b'\n * findKey({ a: 1, b: 3, c: 5 }, isEven); // => undefined\n *\n * const data = new Map([['x', 1], ['y', 2]]);\n * findKey(data, isEven); // => 'y'\n */\nexport default iterator({\n  $$empty: () => undefined,\n  $$unwrap: results => results.x,\n  $$results: () => ({ x: undefined }),\n  $$prepare: getIteratee,\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? !iteratee(value) : !iteratee(value, key, collection)) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    results.x = key;\n    return BREAK;\n  },\n});\n"]}