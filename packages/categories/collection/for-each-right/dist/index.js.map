{"version":3,"sources":["index.js"],"names":["Undefined","$$empty","$$results","$$reverse","$$handler","context","results","iteratee","i","value","key","collection"],"mappings":"2FAAA,kF,2EAEMA,CAAAA,SAAS,CAAG,Y,UA0BH,8BAAS,CACtBC,OAAO,CAAED,SADa,CAEtBE,SAAS,CAAEF,SAFW,CAGtBG,SAAS,GAHa,CAItBC,SAAS,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CACpEJ,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CACT,CANqB,CAAT,C","sourceRoot":"packages/categories/collection/for-each-right","sourcesContent":["import iterator from '@foldr/internal-iterator';\n\nconst Undefined = () => undefined;\n\n/**\n * This function is similar to [forEach](#for-each) except\n * that iteration is performed from right to left.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where:\n * - `value` is the current item in the collection being iterated over.\n * - `key` is the key of the current item in the collection being iterated over.\n * - `collection` is the passed in collection.\n *\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} iteratee The iteratee function to call for each item in `collection`.\n * @returns {undefined}\n *\n * @arity 2\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { forEachRight, unary } from '@foldr/all';\n *\n * forEach([1, 2, 3], unary(console.log)); // Prints 3, then 2, then 1.\n */\nexport default iterator({\n  $$empty: Undefined,\n  $$results: Undefined,\n  $$reverse: true,\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    iteratee(value, key, collection);\n  },\n});\n"]}