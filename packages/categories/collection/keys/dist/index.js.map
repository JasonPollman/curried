{"version":3,"sources":["index.js"],"names":["keysOf","Object","keys","getKey","val","key","hasEnumerableArgumentsLength","prototype","propertyIsEnumerable","call","arguments","removeLengthFromKeys","x","index","indexOf","splice"],"mappings":"ybAKMA,CAAAA,MAAM,CAAGC,MAAM,CAACC,I,CAQhBC,MAAM,CAAG,SAACC,CAAD,CAAMC,CAAN,QAAcA,CAAAA,CAAd,C,CAKTC,4BAA4B,CAAI,UAAwC,CAC5E,MAAOL,CAAAA,MAAM,CAACM,SAAP,CAAiBC,oBAAjB,CAAsCC,IAAtC,CAA2CC,SAA3C,CAAsD,QAAtD,CACR,CAFqC,E,CAS/B,QAASC,CAAAA,oBAAT,CAA8BC,CAA9B,CAAiC,CACtC,GAAMC,CAAAA,CAAK,CAAGD,CAAC,CAACE,OAAF,CAAU,QAAV,CAAd,CACA,GAAY,CAAC,CAAT,CAAAD,CAAJ,CAAgBD,CAAC,CAACG,MAAF,CAASF,CAAT,CAAgB,CAAhB,EAChB,MAAOD,CAAAA,CACR,CA4Bc,QAASV,CAAAA,IAAT,CAAcU,CAAd,CAAiB,CAC9B,GAAI,CAACA,CAAL,CAAQ,MAAO,EAAP,CAER,GAAI,qBAAQA,CAAR,CAAJ,CAAgB,MAAOZ,CAAAA,MAAM,CAACY,CAAD,CAAb,CAChB,GAAI,mBAAMA,CAAN,GAAY,mBAAMA,CAAN,CAAhB,CAA0B,MAAO,iBAAIA,CAAJ,CAAOT,MAAP,CAAP,CAE1B,MAAOG,CAAAA,4BAA4B,CAE/BK,oBAAoB,CAACX,MAAM,CAACY,CAAD,CAAP,CAFW,CAG/BZ,MAAM,CAACY,CAAD,CACX","sourceRoot":"packages/categories/collection/keys","sourcesContent":["import map from '@foldr/map';\nimport isMap from '@foldr/is-map';\nimport isSet from '@foldr/is-set';\nimport isArray from '@foldr/is-array';\n\nconst keysOf = Object.keys;\n\n/**\n * Iteratee for getting the keys for Map and Set objects.\n * @param {any} val The val at the current iteration.\n * @param {string|number} key The key at the current iteration.\n * @returns {string|number} The current iteration key.\n */\nconst getKey = (val, key) => key;\n\n// In Safari 9 the `length` property is enumerable for Arguments objects.\n// This will detect that defect, and the `keysWithoutArgumentsLength`\n// function will be used instead of `keys` below.\nconst hasEnumerableArgumentsLength = (function hasEnumerableArgumentsLength() {\n  return Object.prototype.propertyIsEnumerable.call(arguments, 'length');\n}());\n\n/**\n * Removes the `length` property from a keys set.\n * @param {Array} x The keyset to remove the length property from.\n * @returns {Array} The keyset without the `length` property.\n */\nexport function removeLengthFromKeys(x) {\n  const index = x.indexOf('length');\n  if (index > -1) x.splice(index, 1);\n  return x;\n}\n\n/**\n * Gets the keys of an object.\n *\n * That is, the object's own enumerable properties.\n * This is based on `Object.keys`, except that it guards against non-object input.\n *\n * **Note, the order of the returned keys is not guaranteed to be consistent across platforms.**\n *\n * @name keys\n * @param {any} x The value to get the keys of.\n * @returns {Array} An array of the given object's keys.\n *\n * @arity 1\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { keys } from '@foldr/all';\n *\n * keys([1, 2, 3]);                     // => ['1', '2', '3']\n * keys({ foo: 'bar' });                // => ['foo']\n * keys(null);                          // => []\n * keys(new Map([['a', 1], ['b', 2]])); // => ['a', 'b']\n */\nexport default function keys(x) {\n  if (!x) return [];\n\n  if (isArray(x)) return keysOf(x);\n  if (isMap(x) || isSet(x)) return map(x, getKey);\n\n  return hasEnumerableArgumentsLength\n    /* istanbul ignore next */\n    ? removeLengthFromKeys(keysOf(x))\n    : keysOf(x);\n}\n"]}