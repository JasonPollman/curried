{"version":3,"sources":["index.js"],"names":["EmptyObject","$$empty","$$results","$$prepare","getIteratee","$$handler","context","results","iteratee","i","value","key","collection","capped"],"mappings":"sUAGMA,CAAAA,WAAW,CAAG,iBAAO,EAAP,C,UA8CL,8BAAS,CACtBC,OAAO,CAAED,WADa,CAEtBE,SAAS,CAAEF,WAFW,CAGtBG,SAAS,CAAEC,yBAHW,CAItBC,SAAS,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAEpEL,CAAO,CAACD,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACG,CAAD,CAApC,CAA4CH,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAArD,CAAP,CAAwFF,CACzF,CAPqB,CAAT,C","sourceRoot":"packages/categories/collection/map-keys","sourcesContent":["import iterator from '@foldr/internal-iterator';\nimport getIteratee from '@foldr/internal-iteratee';\n\nconst EmptyObject = () => ({});\n\n/**\n * Creates a new object with the same values as `collection` but with the keys mapped\n * using `iteratee`.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name mapKeys\n * @param {Object} collection The collection to map the keys of.\n * @param {function} iteratee The iteratee function to use while mapping keys.\n * @returns {Object} The results of mapping to keys of `collection` with `iteratee`.\n *\n * @arity 1\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { mapKeys } from '@foldr/all';\n *\n * function uppercaseKey(value, key) {\n *   return key.toUpperCase();\n * }\n *\n * mapKeys({ foo: 1, bar: 2, baz: 3 }, square); // => { FOO: 1, BAR: 2, BAZ: 3 }\n *\n * // Using the shorthand string iteratee you can\n * // map an object to a property of the object.\n *\n * const people = {\n *   1: { name: 'Ben', age: 21 },\n *   2: { name: 'John', age: 32 },\n *   3: { name: 'Al', age: 18 },\n * };\n *\n * mapKeys(people, 'name');\n * // => {\n * //  Ben: { name: 'Ben', age: 21 },\n * //  John: { name: 'John', age: 32 },\n * //  Al: { name: 'Al', age: 18 },\n * // }\n */\nexport default iterator({\n  $$empty: EmptyObject,\n  $$results: EmptyObject,\n  $$prepare: getIteratee,\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    // eslint-disable-next-line no-param-reassign\n    results[context && context.capped ? iteratee(key) : iteratee(value, key, collection)] = value;\n  },\n});\n"]}