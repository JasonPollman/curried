{"version":3,"sources":["index.js"],"names":["EmptyObject","$$empty","$$results","$$prepare","getIteratee","$$handler","context","results","iteratee","i","value","key","collection","capped"],"mappings":"sUAGMA,CAAAA,WAAW,CAAG,iBAAO,EAAP,C,UAyCL,8BAAS,CACtBC,OAAO,CAAED,WADa,CAEtBE,SAAS,CAAEF,WAFW,CAGtBG,SAAS,CAAEC,yBAHW,CAItBC,SAAS,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAEpEL,CAAO,CAACI,CAAD,CAAP,CAAeL,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CACtE,CAPqB,CAAT,C","sourceRoot":"packages/categories/collection/map-values","sourcesContent":["import iterator from '@foldr/internal-iterator';\nimport getIteratee from '@foldr/internal-iteratee';\n\nconst EmptyObject = () => ({});\n\n/**\n * Creates a new object with the same keys as `collection` by mapping over `collection` and\n * calling `iteratee` for each value in the collection.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name mapValues\n * @param {Object} collection The collection to map the values of.\n * @param {function} iteratee The iteratee function to use while mapping values.\n * @returns {Object} The results of mapping the `collection` using `iteratee`.\n *\n * @arity 2\n * @category object\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { mapValues } from '@foldr/all';\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * mapValues({ foo: 1, bar: 2, baz: 3 }, square); // => { foo: 1, bar: 4, baz: 9 }\n *\n * // Using the shorthand string iteratee you can\n * // map an object to a property of the object.\n *\n * const people = {\n *   1: { name: 'Ben', age: 21 },\n *   2: { name: 'John', age: 32 },\n *   3: { name: 'Al', age: 18 },\n * };\n *\n * mapValues(people, 'name'); // => { 1: 'Ben', 2: 'John', 3: 'Al' }\n */\nexport default iterator({\n  $$empty: EmptyObject,\n  $$results: EmptyObject,\n  $$prepare: getIteratee,\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    // eslint-disable-next-line no-param-reassign\n    results[key] = context && context.capped ? iteratee(value) : iteratee(value, key, collection);\n  },\n});\n"]}