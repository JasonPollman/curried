{"version":3,"sources":["index.js"],"names":["$$empty","$$results","$$handler","context","results","iteratee","i","value","key","collection","capped"],"mappings":"2FAAA,kF,qFAmCe,8BAAS,CACtBA,OAAO,CAAE,mBAAM,EAAN,CADa,CAEtBC,SAAS,CAAE,mBAAM,EAAN,CAFW,CAGtBC,SAAS,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAEpEL,CAAO,CAACE,CAAD,CAAP,CAAaH,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CACpE,CANqB,CAAT,C","sourceRoot":"packages/categories/collection/map","sourcesContent":["import iterator from '@foldr/internal-iterator';\n\n/**\n * This function is similar to `Array#map` except that is works for Array, Object, String,\n * Map, Set, and Arguments objects.\n *\n * Iterates over `collection`, calling `iteratee` for each item in the collection and returning\n * a new array containing the return values from the calls to `iteratee`.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name map\n * @param {Array|Object|String|Map|Set|Arguments} collection The collection to iterate over.\n * @param {function} iteratee The iterate function to use while mapping.\n * @returns {Array} The results of mapping `collection` to `iteratee`.\n *\n * @arity 2\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { map } from '@foldr/all';\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * map([1, 2, 3], square);            // => [1, 4, 9]\n * map({ a: 1, b: 2, c: 3 }, square); // => [1, 4, 9]\n * map('foobar', identity);           // => ['f', 'o', 'o', 'b', 'a', 'r']\n */\nexport default iterator({\n  $$empty: () => [],\n  $$results: () => [],\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    // eslint-disable-next-line no-param-reassign\n    results[i] = context && context.capped ? iteratee(value) : iteratee(value, key, collection);\n  },\n});\n"]}