{"version":3,"sources":["index.js"],"names":["sample","collection","items","length"],"mappings":"qVA6Be,QAASA,CAAAA,MAAT,CAAgBC,CAAhB,CAA4B,CACzC,GAAI,CAACA,CAAL,CAAiB,OAEjB,GAAMC,CAAAA,CAAK,CAAG,qBAAQD,CAAR,EAAsBA,CAAtB,CAAmC,oBAAOA,CAAP,CAAjD,CACA,MAAOC,CAAAA,CAAK,CAAC,oBAAOA,CAAK,CAACC,MAAN,CAAe,CAAtB,CAAD,CACb","sourceRoot":"packages/categories/collection/sample","sourcesContent":["import random from '@foldr/random';\nimport values from '@foldr/values';\nimport isArray from '@foldr/is-array';\n\n/**\n * Gets a random element from the provided collection.\n *\n * @name sample\n * @param {Array|Object|String|Map|Set|Arguments} collection The collection to sample from.\n * @returns {Array} A new array containing the reversed values of `array`.\n *\n * @arity 1\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { sample } from '@foldr/all';\n *\n * const items = ['foo', 'bar', 'baz'];\n * sample(items); // => Either 'foo', 'bar', or 'baz';\n *\n * const point = { x: 1, y: 2 };\n * sample(point); // Either 1 or 2\n *\n * const data = new Map([['a', 1], ['b', 2], ['c', 3]]);\n * sample(data); // => Either 1, 2, or 3\n */\nexport default function sample(collection) {\n  if (!collection) return undefined;\n\n  const items = isArray(collection) ? collection : values(collection);\n  return items[random(items.length - 1)];\n}\n"]}