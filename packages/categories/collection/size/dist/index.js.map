{"version":3,"sources":["index.js"],"names":["size","x","length","tag"],"mappings":"oWA4Be,QAASA,CAAAA,IAAT,CAAcC,CAAd,CAAiB,CAC9B,GAAI,CAACA,CAAL,CAAQ,MAAO,EAAP,CACR,GAAI,yBAAYA,CAAZ,CAAJ,CAAoB,MAAOA,CAAAA,CAAC,CAACC,MAAT,CAEpB,GAAMC,CAAAA,CAAG,CAAG,yBAAYF,CAAZ,CAAZ,CACA,MAAe,cAAR,GAAAE,CAAG,EAA+B,cAAR,GAAAA,CAA1B,CAAmDF,CAAC,CAACD,IAArD,CAA4D,kBAAKC,CAAL,EAAQC,MAC5E","sourceRoot":"packages/categories/collection/size","sourcesContent":["import keys from '@foldr/keys';\nimport isArrayLike from '@foldr/is-array-like';\nimport toStringTag from '@foldr/to-string-tag';\n\n/**\n * Gets the size of an object.\n * That is, the number of the object's own enumerable properties.\n *\n * @name size\n * @param {any} x The value to get the size of.\n * @returns {number} The size (or \"length\") of the object.\n *\n * @arity 1\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { size } from '@foldr/all';\n *\n * size([1, 2, 3]);       // => 3\n * size({ foo: 'bar' });  // => 1\n * size(null);            // => 0\n *\n * const set = new Set([1, 2, 3]);\n * size(set); // => 3\n */\nexport default function size(x) {\n  if (!x) return 0;\n  if (isArrayLike(x)) return x.length;\n\n  const tag = toStringTag(x);\n  return tag === '[object Map]' || tag === '[object Set]' ? x.size : keys(x).length;\n}\n"]}