{"version":3,"sources":["index.js"],"names":["getValue","val","values","x","vals","props","size","length","i"],"mappings":"+XAUA,GAAMA,CAAAA,QAAQ,CAAG,SAAAC,CAAG,QAAIA,CAAAA,CAAJ,CAApB,CA4Be,QAASC,CAAAA,MAAT,CAAgBC,CAAhB,CAAmB,CAChC,GAAI,CAACA,CAAL,CAAQ,MAAO,EAAP,CACR,GAAI,mBAAMA,CAAN,GAAY,mBAAMA,CAAN,CAAhB,CAA0B,MAAO,iBAAIA,CAAJ,CAAOH,QAAP,CAAP,CAFM,GAI1BI,CAAAA,CAAI,CAAG,EAJmB,CAK1BC,CAAK,CAAG,kBAAKF,CAAL,CALkB,CAM1BG,CAAI,CAAGD,CAAK,CAACE,MANa,CAQ5BC,CAAC,CAAG,CARwB,CAShC,MAAOA,CAAC,CAAGF,CAAX,EAAiBF,CAAI,CAACI,CAAD,CAAJ,CAAUL,CAAC,CAACE,CAAK,CAACG,CAAC,EAAF,CAAN,CAA5B,CACA,MAAOJ,CAAAA,CACR","sourceRoot":"packages/categories/collection/values","sourcesContent":["import map from '@foldr/map';\nimport keys from '@foldr/keys';\nimport isMap from '@foldr/is-map';\nimport isSet from '@foldr/is-set';\n\n/**\n * Iteratee for getting the values for Map and Set objects.\n * @param {any} val The val at the current iteration.\n * @returns {string|number} The current iteration value.\n */\nconst getValue = val => val;\n\n/**\n * Gets the enumerable values of an object.\n * That is, the object's own enumerable properties.\n *\n * If an array is passed, a shallow copy of the array is made.\n *\n * Note, the order of the keys is not guaranteed.\n *\n * @name values\n * @param {any} x The thing to get the values of.\n * @returns {Array} An array of the given object's values.\n *\n * @arity 1\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { values } from '@foldr/all';\n *\n * values([1, 2, 3]);                     // => ['1', '2', '3']\n * values({ foo: 'bar' });                // => ['foo']\n * values(null);                          // => []\n * values(new Map([['a', 1], ['b', 2]])); // => [1, 2]\n */\nexport default function values(x) {\n  if (!x) return [];\n  if (isMap(x) || isSet(x)) return map(x, getValue);\n\n  const vals = [];\n  const props = keys(x);\n  const size = props.length;\n\n  let i = 0;\n  while (i < size) vals[i] = x[props[i++]];\n  return vals;\n}\n"]}