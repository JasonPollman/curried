{"version":3,"sources":["index.js"],"names":["MAX_VALUE","Number","toFinite","x"],"mappings":"6FAAA,kE,2EAIQA,CAAAA,S,CAAcC,M,CAAdD,S,CAyBO,QAASE,CAAAA,QAAT,CAAkBC,CAAlB,CAAqB,CAElC,GAAI,CAACA,CAAL,CAAQ,MAAa,EAAN,GAAAA,CAAC,CAASA,CAAT,CAAa,CAArB,CAERA,CAAC,CAAG,sBAASA,CAAT,CAAJ,CACA,GAAI,CAACA,CAAL,CAAQ,MAAa,EAAN,GAAAA,CAAC,CAASA,CAAT,CAAa,CAArB,CAER,MAAOA,CAAAA,CAAC,CAAGH,SAAJ,CAAgBA,SAAhB,CAA6BG,CAAC,CAAG,CAACH,SAAL,CAAiB,CAACA,SAAlB,CAA8BG,CACnE","sourceRoot":"packages/categories/conversion/to-finite","sourcesContent":["import toNumber from '@foldr/to-number';\n\n/* eslint-disable no-nested-ternary, no-self-compare, no-param-reassign */\n\nconst { MAX_VALUE } = Number;\n\n/**\n * Converts `x` to a finite number.\n * Note, this will also call `toNumber` on `x`.\n *\n * @name toFinite\n * @param {string|number} x The value to convert to a finite number.\n * @returns {number} The finite equivalent of `x`.\n *\n * @arity 1\n * @category conversion\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { toFinite } from '@foldr/all';\n *\n * toFinite(0);         // => 0;\n * toFinite(Infinity);  // => Number.MAX_VALUE;\n * toFinite(-Infinity); // => Number.MIN_VALUE;\n *\n * toFinite({ valueOf() { return 5; } }) // => 5\n */\nexport default function toFinite(x) {\n  // Why the `x === 0`? Because -0 === 0.\n  if (!x) return x === 0 ? x : 0;\n\n  x = toNumber(x);\n  if (!x) return x === 0 ? x : 0;\n\n  return x > MAX_VALUE ? MAX_VALUE : (x < -MAX_VALUE ? -MAX_VALUE : x);\n}\n"]}