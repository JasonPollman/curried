{"version":3,"sources":["index.js"],"names":["truncate","Math","trunc","floor","toInteger","x"],"mappings":"8FAAA,kE,wEAEA,GAAMA,CAAAA,QAAQ,CAAGC,IAAI,CAACC,KAAL,EAAyCD,IAAI,CAACE,KAA/D,CA4Be,QAASC,CAAAA,SAAT,CAAmBC,CAAnB,CAAsB,CACnC,MAAOL,CAAAA,QAAQ,CAAC,sBAASK,CAAT,CAAD,CAChB","sourceRoot":"packages/categories/conversion/to-integer","sourcesContent":["import toNumber from '@foldr/to-number';\n\nconst truncate = Math.trunc || /* istanbul ignore next */ Math.floor;\n\n/**\n * Converts `x` to an integer.\n * Internally, this calls [toNumber](#to-number).\n *\n * @name toInteger\n * @param {string|number|Object} x The value to convert to a number.\n * @returns {number} The number equivalent of `x`.\n *\n * @arity 1\n * @category conversion\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { toInteger } from '@foldr/all';\n *\n * toInteger(1.123);     // => 1;\n * toInteger('1.123');   // => 1;\n * toInteger('1e6');     // => 1000000;\n *\n * toInteger({\n *   value: 'string-value',\n *   valueOf() { return 5.123; },\n * }) // => 5\n */\nexport default function toInteger(x) {\n  return truncate(toNumber(x));\n}\n"]}