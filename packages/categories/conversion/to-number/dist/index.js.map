{"version":3,"sources":["index.js"],"names":["toInt","parseInt","NAN","IS_OCTAL","IS_BINARY","toNumberIE","x","isBinary","test","slice","toNumber","IS_IE"],"mappings":"mMAEMA,KAAK,CAAGC,Q,CACRC,GAAG,CAAG,EAAI,C,CAOVC,QAAQ,CAAG,a,CAOXC,SAAS,CAAG,a,CASX,QAASC,CAAAA,UAAT,CAAoBC,CAApB,CAAuB,CAC5B,GAAiB,QAAb,QAAOA,CAAAA,CAAX,CAA2B,MAAOA,CAAAA,CAAP,CAC3B,GAAiB,QAAb,QAAOA,CAAAA,CAAX,CAA2B,MAAOJ,CAAAA,GAAP,CAE3B,GAAMK,CAAAA,CAAQ,CAAGH,SAAS,CAACI,IAAV,CAAeF,CAAf,CAAjB,CACA,GAAIC,CAAQ,EAAIJ,QAAQ,CAACK,IAAT,CAAcF,CAAd,CAAhB,CAAkC,MAAON,CAAAA,KAAK,CAACM,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAD,CAAaF,CAAQ,CAAG,CAAH,CAAO,CAA5B,CAAZ,CAElC,MAAO,CAACD,CACT,CAQM,QAASI,CAAAA,QAAT,CAAkBJ,CAAlB,CAAqB,CAE1B,MAAoB,QAAb,QAAOA,CAAAA,CAAP,CAAwBA,CAAxB,CAAyC,QAAb,QAAOA,CAAAA,CAAP,CAAwBJ,GAAxB,CAA8B,CAACI,CACnE,C,aAiCc,CAACK,kBAAD,CAASD,QAAT,CAA+CL,U","sourceRoot":"packages/categories/conversion/to-number","sourcesContent":["import { IS_IE } from '@foldr/internal-env';\n\nconst toInt = parseInt;\nconst NAN = 0 / 0;\n\n/**\n * Detects octal number strings.\n * For example: '0o7' and '0O7'\n * @type {RegExp}\n */\nconst IS_OCTAL = /^0o[0-7]+$/i;\n\n/**\n * Detects binary number strings.\n * For example: '0b7' and '0B7'\n * @type {RegExp}\n */\nconst IS_BINARY = /^0b[0-1]+$/i;\n\n/**\n * A version of `toNumber` for IE, since IE doesn't support\n * binary and octal number conversions like `+0b` and `+0o`.\n * @param {number} x The value to convert to a number.\n * @returns {number} `x` as a number.\n * @export\n */\nexport function toNumberIE(x) {\n  if (typeof x === 'number') return x;\n  if (typeof x === 'symbol') return NAN;\n\n  const isBinary = IS_BINARY.test(x);\n  if (isBinary || IS_OCTAL.test(x)) return toInt(x.slice(2), isBinary ? 2 : 8);\n\n  return +x;\n}\n\n/**\n * Converts `x` to a number.\n * @param {string|number|Object} x The value to convert to a number.\n * @returns {number} `x` as a number.\n * @export\n */\nexport function toNumber(x) {\n  // eslint-disable-next-line no-nested-ternary\n  return typeof x === 'number' ? x : typeof x === 'symbol' ? NAN : +x;\n}\n\n/**\n * Converts `x` to a number.\n * If `x` is a number, it will be returned, if `x` is a string it will be coerced to\n * a number using `+x`. If `x` is an object, it's `valueOf` method will be called, if\n * available.\n *\n * Binary, octal, and hexidecimal strings (i.e. '0b101') will be converted\n * to their number equivalent.\n *\n * @name toNumber\n * @param {string|number|Object} x The value to convert to a number.\n * @returns {number} The number equivalent of `x`.\n *\n * @arity 1\n * @category conversion\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { toNumber } from '@foldr/all';\n *\n * toNumber(0);     // => 0;\n * toNumber('0');   // => 0;\n * toNumber('1e6'); // => 1000000;\n *\n * toNumber({\n *   value: 'string-value',\n *   valueOf() { return 5; },\n * }) // => 5\n */\nexport default !IS_IE ? toNumber : /* istanbul ignore next */ toNumberIE;\n"]}