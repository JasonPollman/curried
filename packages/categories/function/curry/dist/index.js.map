{"version":3,"sources":["index.js"],"names":["curry","fn","options","Error","optimized","_"],"mappings":"uLAAA,6E,k0BAwCe,QAASA,CAAAA,KAAT,CAAeC,CAAf,CAAiC,IAAdC,CAAAA,CAAc,wDAAJ,EAAI,CAC9C,GAAkB,UAAd,QAAOD,CAAAA,CAAX,CAA8B,CAC5B,KAAM,IAAIE,CAAAA,KAAJ,CAAU,iDAAV,CACP,CAKD,MAAO,2BAAcF,CAAd,gBAAoBG,SAAS,GAA7B,EAAyCF,CAAzC,EACR,CAGDF,KAAK,CAACK,CAAN,CAAUA,gBAAV","sourceRoot":"packages/categories/function/curry","sourcesContent":["import internalCurry, { _ } from '@foldr/internal-curry';\n\n/**\n * [Curries](https://en.wikipedia.org/wiki/Currying) a function.\n *\n * @name curry\n * @param {function} fn The function to curry.\n * @param {Object=} options Currying options.\n * @param {number} [options.arity=fn.length] The arity of `fn` or\n * a specific arity override to curry `fn` to.\n * @returns {function} The curried version of `fn`.\n *\n * @arity 1\n * @category function\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { curry, _ } from '@foldr/all';\n *\n * const curried = curry((x, y, z) => x + y + z);\n * curried()        // => curried\n * curried(1)       // => [object Function]\n * curried(1)(2)    // => [object Function]\n * curried(1)(2)(3) // => 6\n * curried(1, 2)(3) // => 6\n * curried(1)(2, 3) // => 6\n * curried(1, 2, 3) // => 6\n *\n * // You can also use partial application (placeholders)...\n *\n * const triples = curry((a, b, c) => [a, b, c]);\n * triples(_, 2, 3)(1)    // => [1, 2, 3]\n * triples(_, _, 3)(1)(2) // => [1, 2, 3]\n * triples(1)(_)(2)(_)(3) // => [1, 2, 3]\n * triples(1)(_, 3)(2)    // => [1, 2, 3]\n * triples(_, 2)(1)(3)    // => [1, 2, 3]\n *\n */\nexport default function curry(fn, options = {}) {\n  if (typeof fn !== 'function') {\n    throw new Error('Argument for parameter `fn` must be a function.');\n  }\n\n  // This will force `nary` to be used to provide a consistent\n  // behavior, since optimized will only be used internally or\n  // unless explicitly flagged.\n  return internalCurry(fn, { optimized: false, ...options });\n}\n\n// Exposing the placeholder property...\ncurry._ = _;\nexport { _ };\n"]}