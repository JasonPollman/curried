import SafeSymbolFor from"@foldr/internal-symbol";export var ARITY=SafeSymbolFor("source-arity");export var SOURCE=SafeSymbolFor("source-fn");function toStringForMemoized(){return"/* Memoized */\r\n".concat(this[SOURCE].toString())}var hasOwnProperty=Object.prototype.hasOwnProperty;function del(a){if(this.has(a)){this.size--;delete this.data[a]}return this}function set(a,b){if(!this.has(a)){this.size++;this.data[a]=b}return this}function get(a){return this.data[a]}function has(a){return hasOwnProperty.call(this.data,a)}function clear(){this.size=0;this.data={};return this}function DefaultCache(){return{has:has,set:set,get:get,clear:clear,size:0,data:{},delete:del}}function emsg(a){return"Argument for parameter \"".concat(a,"\" must be a function.")}export default function memoize(a){var c=1<arguments.length&&arguments[1]!==void 0?arguments[1]:JSON.stringify,d=2<arguments.length?arguments[2]:void 0;if("function"!=typeof a)throw new Error(emsg("fn"));if("function"!=typeof c)throw new Error(emsg("resolver"));function b(){var d=b.cache,e=c(arguments);if(d.has(e)){return d.get(e)}var f=a.apply(this,arguments);d.set(e,f);return f}b[ARITY]=a[ARITY]!==void 0?a[ARITY]:a.length;b[SOURCE]=a;b.cache=d||new memoize.Cache;b.toString=toStringForMemoized;return b}memoize.Cache=DefaultCache;
//# sourceMappingURL=index.js.map
