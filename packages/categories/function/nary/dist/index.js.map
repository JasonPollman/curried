{"version":3,"sources":["index.js"],"names":["ARITY","SOURCE","toStringForCapped","concat","toString","nary","fn","n","TypeError","ary","cap","fixed","args","arguments","length","apply"],"mappings":"6HAAA,8E,wEAQO,GAAMA,CAAAA,KAAK,CAAG,4BAAc,cAAd,CAAd,C,oBAMA,GAAMC,CAAAA,MAAM,CAAG,4BAAc,WAAd,CAAf,C,sBASP,QAASC,CAAAA,iBAAT,EAA6B,CAC3B,MAAO,6BAAsB,KAAKF,KAAL,CAAtB,YAA2CG,MAA3C,CAAkD,KAAKF,MAAL,EAAaG,QAAb,EAAlD,CACR,CA0Bc,QAASC,CAAAA,IAAT,CAAcC,CAAd,CAAkBC,CAAlB,CAAqB,CAClC,GAAkB,UAAd,QAAOD,CAAAA,CAAX,CAA8B,KAAM,IAAIE,CAAAA,SAAJ,CAAc,sBAAd,CAAN,CADI,GAG5BC,CAAAA,CAAG,CAAG,CAACF,CAAD,EAAM,CAHgB,CAI5BG,CAAG,CAAS,CAAN,CAAAD,CAAG,CAAO,CAAP,CAAWA,CAJQ,CAMlC,QAASE,CAAAA,CAAT,EAAiB,CACf,GAAMC,CAAAA,CAAI,CAAGC,SAAb,CACA,GAAID,CAAI,CAACE,MAAL,CAAcJ,CAAlB,CAAuBE,CAAI,CAACE,MAAL,CAAcJ,CAAd,CACvB,MAAOJ,CAAAA,CAAE,CAACS,KAAH,CAAS,IAAT,CAAeH,CAAf,CACR,CAEDD,CAAK,CAACX,KAAD,CAAL,CAAeU,CAAf,CACAC,CAAK,CAACV,MAAD,CAAL,CAAgBK,CAAhB,CACAK,CAAK,CAACP,QAAN,CAAiBF,iBAAjB,CAEA,MAAOS,CAAAA,CACR","sourceRoot":"packages/categories/function/nary","sourcesContent":["import SafeSymbolFor from '@foldr/internal-symbol';\n\n/* eslint-disable require-jsdoc */\n\n/**\n * Used to track the arity of curried functions.\n * @type {SafeSymbol}\n */\nexport const ARITY = SafeSymbolFor('source-arity');\n\n/**\n * Used to track the arity of capped functions.\n * @type {SafeSymbol}\n */\nexport const SOURCE = SafeSymbolFor('source-fn');\n\n/**\n * The `toString` implementation for capped functions.\n * This will print the original function's source string\n * prepended with a friendly message that the function is capped.\n * @returns {string} The source function's code with a comment\n * informing the user that the function is curried.\n */\nfunction toStringForCapped() {\n  return `/* Arity Capped to ${this[ARITY]} */\\r\\n`.concat(this[SOURCE].toString());\n}\n\n/**\n * Limits the [arity](https://en.wikipedia.org/wiki/Arity) of the given function to the given value.\n *\n * @name nary\n * @param {function} fn The function to fix the arity of.\n * @param {number} n The maximum number of arguments the returned function will accept.\n * @returns {function} The function with a fixed arity of `n`.\n *\n * @arty 2\n * @category function\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { nary } from '@foldr/all';\n *\n * function foo() {\n *    return arguments;\n * }\n *\n * const fixed = nary(foo, 2);\n * fixed('a', 'b', 'c', 'd'); // => { 0: 'a', 1: 'b' }\n */\nexport default function nary(fn, n) {\n  if (typeof fn !== 'function') throw new TypeError('Expected a function.');\n\n  const ary = +n || 0;\n  const cap = ary < 0 ? 0 : ary;\n\n  function fixed() {\n    const args = arguments;\n    if (args.length > cap) args.length = cap;\n    return fn.apply(this, args);\n  }\n\n  fixed[ARITY] = cap;\n  fixed[SOURCE] = fn;\n  fixed.toString = toStringForCapped;\n\n  return fixed;\n}\n"]}