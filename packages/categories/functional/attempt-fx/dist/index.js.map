{"version":3,"sources":["index.js"],"names":["attempt","arity","signature","optimized"],"mappings":"uTAmCe,2BAAMA,gBAAN,CAAe,CAC5BC,KAAK,CAAE,CADqB,CAE5BC,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFiB,CAG5BC,SAAS,GAHmB,CAAf,C","sourceRoot":"packages/categories/functional/attempt-fx","sourcesContent":["import attempt from '@foldr/attempt';\nimport fmake from '@foldr/internal-fmake';\n\n/**\n * **Functional, autocurried version of [attempt](#attempt).**\n *\n * Invokes and returns the return value from `fn`. If the call to `fn` throws,\n * the caught error is returned.\n *\n * @name attemptFx\n * @param {Array|null|undefined} args An array of arguments to pass to `fn`.\n * @param {function} fn The function to attempt to invoke.\n * @returns {any} The return value from `fn` or the caught error.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { attemptFx } from '@foldr/all';\n *\n * function assertIsPositive() {\n *    if (x < 0) throw new Error('x must be a positive number');\n *    return x;\n * }\n *\n * // Call was okay.\n * const attemptFx([1])(assertIsPositive); // => 1;\n *\n * // Call threw.\n * const attemptFx([-1], assertIsPositive); => Error('x must be a positive number');\n */\nexport default fmake(attempt, {\n  arity: 2,\n  signature: [1, 0],\n  optimized: false,\n});\n"]}