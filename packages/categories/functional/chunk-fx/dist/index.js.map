{"version":3,"sources":["index.js"],"names":["chunk","arity","signature"],"mappings":"mTA8Be,2BAAMA,cAAN,CAAa,CAC1BC,KAAK,CAAE,CADmB,CAE1BC,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFe,CAAb,C","sourceRoot":"packages/categories/functional/chunk-fx","sourcesContent":["import chunk from '@foldr/chunk';\nimport fmake from '@foldr/internal-fmake';\n\n/**\n * **Functional, autocurried version of [chunk](#chunk).**\n *\n * Chunks an array into equal parts of size `n`.\n *\n * If the number of elements in the array doesn't split evenly, the last array in the returned\n * set will contain the remaining items.\n *\n * @name chunkFx\n * @param {number} chunkSize The size of each chunk.\n * @param {Array} array The array to chunk.\n * @returns {Array<Array>} The chunked array.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { chunkFx } from '@foldr/all';\n *\n * chunkFx(1)([1, 2, 3, 4]);    // => [[1], [2], [3], [4]]\n * chunkFx(2)([1, 2, 3, 4]);    // => [[1, 2], [3, 4]]\n * chunkFx(3, [1, 2, 3, 4, 5]); // => [[1, 2], [3, 4], [5]]\n */\nexport default fmake(chunk, {\n  arity: 2,\n  signature: [1, 0],\n});\n"]}