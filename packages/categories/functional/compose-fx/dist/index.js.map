{"version":3,"sources":["index.js"],"names":["compose","arity"],"mappings":"uTA+Ce,2BAAMA,gBAAN,CAAe,CAAEC,KAAK,CAAE,CAAT,CAAf,C","sourceRoot":"packages/categories/functional/compose-fx","sourcesContent":["import fmake from '@foldr/internal-fmake';\nimport compose from '@foldr/compose';\n\n/**\n * **Functional, autocurried version of [compose](#compose).**\n *\n * Creates a new function that returns the result of invoking\n * the two given functions in successive order from right to left\n * passing the results of the previous invocation to the next\n * function.\n *\n * Each function will be invoked with the `this` binding available\n * to the newly created function.\n *\n * This function is very similar to `pipe`, except that the order\n * of function execution flows from right to left (bottom to top).\n *\n * Remember `f(g(x))` from high school? This is it.\n *\n * @name composeFx\n * @param {function} g The first (wrapper) function to compose.\n * @param {function} f The second function to compose.\n * @returns {function} The composite function.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { composeFx } from '@foldr/all';\n *\n * function sum(a, b) {\n *   return a + b;\n * }\n *\n * function square(x) {\n *   return x * x;\n * }\n *\n * const sumSquared = composeFx(square)(sum);\n *\n * sumSquared(1, 2); // => 9\n * sumSquared(2, 3); // => 25\n */\nexport default fmake(compose, { arity: 2 });\n"]}