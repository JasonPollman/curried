{"version":3,"sources":["index.js"],"names":["every","unwrap","results","x","Empty","Results","handler","context","iteratee","i","value","key","collection","capped","BREAK","f","arity","signature"],"mappings":"+pBA2CMA,CAAAA,KAAK,CAAG,8BAAgB,CAC5BC,MAAM,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAACC,CAAZ,CADa,CAE5BC,KAAK,CAAE,sBAFqB,CAG5BC,OAAO,CAAE,mBAAO,CAAEF,CAAC,GAAH,CAAP,CAHmB,CAI5BG,OAAO,CAAE,WAACC,CAAD,CAAUL,CAAV,CAAmBM,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClE,GAAIL,CAAO,EAAIA,CAAO,CAACM,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA1D,CAAoF,CAClF,MACD,CAEDV,CAAO,CAACC,CAAR,IACA,MAAOW,wBACR,CAX2B,CAAhB,C,CA+CDC,CAAC,CAAG,2BAAkBf,KAAlB,CAAyB,CACxCgB,KAAK,CAAE,CADiC,CAExCH,MAAM,GAFkC,CAGxCN,OAAO,CAAE,QAH+B,CAIxCU,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ6B,CAAzB,C,0BAOFjB,K","sourceRoot":"packages/categories/functional/every-fx","sourcesContent":["/**\n * Exports the `every` function.\n * @since 11/10/18\n * @file\n */\n\nimport FunctionalFactory from '@foldr/internal-fmake';\nimport IteratorFactory, { BREAK } from '@foldr/internal-iterator';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * This function is similar to `Array#every`.\n *\n * Iterates over `collection`, calling `predicate` for each item in the collection. If `predicate`\n * returns `falsy`, iteration is broken and `false` is returned. Otherwise `true` is returned.\n *\n * Predicate functions are called with the signature `predicate(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name every\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} predicate The predicate iteratee function.\n * @returns {boolean} True if all items in the collection return true\n * for `predicate`, false otherwise.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * every([1, 2, 3], isEven);            // => false\n * every([2, 4, 6], isEven);            // => true\n *\n * every({ a: 1, b: 2, c: 3 }, isEven); // => false\n * every({ a: 2, b: 4, c: 6 }, isEven); // => true\n */\nconst every = IteratorFactory({\n  unwrap: results => results.x,\n  Empty: () => true,\n  Results: () => ({ x: true }),\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? iteratee(value) : iteratee(value, key, collection)) {\n      return undefined;\n    }\n\n    results.x = false;\n    return BREAK;\n  },\n});\n\n/**\n * Functional, autocurried version of [every](#every)\n *\n * Iterates over `collection`, calling `predicate` for each item in the collection. If `predicate`\n * returns `falsy`, iteration is broken and `false` is returned. Otherwise `true` is returned.\n *\n * Predicate functions are called with the signature `predicate(value)`, where\n * `value` is the current item in the collection being iterated over.\n *\n * @name every.f\n * @param {function} predicate The predicate iteratee function.\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @returns {boolean} True if all items in the collection return true\n * for `predicate`, false otherwise.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * every.f(isEven, [1, 2, 3]);            // => false\n * every.f(isEven, [2, 4, 6]);            // => true\n *\n * every.f(isEven, { a: 1, b: 2, c: 3 }); // => false\n * every.f(isEven, { a: 2, b: 4, c: 6 }); // => true\n */\nexport const f = FunctionalFactory(every, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default every;\n"]}