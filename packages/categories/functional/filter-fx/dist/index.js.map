{"version":3,"sources":["index.js"],"names":["filter","Empty","Results","handler","context","results","iteratee","i","value","key","collection","capped","length","f","arity","signature"],"mappings":"0UAwCMA,CAAAA,MAAM,CAAG,8BAAgB,CAC7BC,KAAK,CAAE,mBAAM,EAAN,CADsB,CAE7BC,OAAO,CAAE,mBAAM,EAAN,CAFoB,CAG7BC,OAAO,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClE,GAAIN,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA1D,CAAoF,CAClFL,CAAO,CAACA,CAAO,CAACO,MAAT,CAAP,CAA0BJ,CAC3B,CACF,CAP4B,CAAhB,C,CA2CFK,CAAC,CAAG,2BAAkBb,MAAlB,CAA0B,CACzCc,KAAK,CAAE,CADkC,CAEzCH,MAAM,GAFmC,CAGzCP,OAAO,CAAE,QAHgC,CAIzCW,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ8B,CAA1B,C,0BAOFf,M","sourceRoot":"packages/categories/functional/filter-fx","sourcesContent":["/**\n * Exports the `filter` function.\n * @since 11/10/18\n * @file\n */\n\nimport IteratorFactory from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * This function is similar to `Array#filter` except that is works for Array, Object, String,\n * Map, Set, and Arguments objects.\n *\n * Iterates over `collection`, calling `filterFn` for each item in the collection. If\n * `filterFn` returns `true`, the value will be kept in the returned array, otherwise\n * the value is omitted from the returned array.\n *\n * Filterer functions are called with the signature `filterFn(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} filterFn The iteratee function to use while filtering.\n * @returns {Array} The results of mapping `collection` to `filterFn`.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * filter([1, 2, 3], isEven);            // => [2]\n * filter({ a: 1, b: 2, c: 3 }, isEven); // => [2]\n */\nconst filter = IteratorFactory({\n  Empty: () => [],\n  Results: () => [],\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? iteratee(value) : iteratee(value, key, collection)) {\n      results[results.length] = value;\n    }\n  },\n});\n\n/**\n * Functional, autocurried version of [filter](#filter).\n *\n * This function is similar to `Array#filter` except that is works for Array, Object, String,\n * Map, Set, and Arguments objects.\n *\n * Iterates over `collection`, calling `filterFn` for each item in the collection. If\n * `filterFn` returns `true`, the value will be kept in the returned array, otherwise\n * the value is omitted from the returned array.\n *\n * Filterer functions are called with the signature `filterFn(value)`, where\n * `value` is the current item in the collection being iterated over.\n *\n * @name filter.f\n * @param {function} filterFn The iteratee function to use while filtering.\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @returns {Array} The results of filtering `collection` with `filterFn`.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * filter.f(isEven, [1, 2, 3]);            // => [2]\n * filter.f(isEven, { a: 1, b: 2, c: 3 }); // => [2]\n */\nexport const f = FunctionalFactory(filter, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default filter;\n"]}