{"version":3,"sources":["index.js"],"names":["map","Empty","Results","handler","context","results","iteratee","i","value","key","collection","capped","f","arity","signature"],"mappings":"0UAyCMA,CAAAA,GAAG,CAAG,8BAAgB,CAC1BC,KAAK,CAAE,mBAAM,EAAN,CADmB,CAE1BC,OAAO,CAAE,mBAAM,EAAN,CAFiB,CAG1BC,OAAO,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClEL,CAAO,CAACE,CAAD,CAAP,CAAaH,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CACpE,CALyB,CAAhB,C,CAsCCE,CAAC,CAAG,2BAAkBZ,GAAlB,CAAuB,CACtCa,KAAK,CAAE,CAD+B,CAEtCF,MAAM,GAFgC,CAGtCP,OAAO,CAAE,QAH6B,CAItCU,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ2B,CAAvB,C,0BAOFd,G","sourceRoot":"packages/categories/functional/map-fx","sourcesContent":["/**\n * Exports the `map` function.\n * @since 11/10/18\n * @file\n */\n\nimport IteratorFactory from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * This function is similar to `Array#map` except that is works for Array, Object, String,\n * Map, Set, and Arguments objects.\n *\n * Iterates over `collection`, calling `iteratee` for each item in the collection and returning\n * a new array containing the return values from the calls to `iteratee`.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name map\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} iteratee The iterate function to use while mapping.\n * @returns {Array} The results of mapping `collection` to `iteratee`.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * map([1, 2, 3], square);            // => [1, 4, 9]\n * map({ a: 1, b: 2, c: 3 }, square); // => [1, 4, 9]\n * map('foobar', identity);           // => ['f', 'o', 'o', 'b', 'a', 'r']\n */\nconst map = IteratorFactory({\n  Empty: () => [],\n  Results: () => [],\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    results[i] = context && context.capped ? iteratee(value) : iteratee(value, key, collection);\n  },\n});\n\n/**\n * Functional, autocurried version of [map](#map).\n *\n * Iterates over `collection`, calling `iteratee` for each item in the collection and returning\n * a new array containing the return values from mapping `collection` to `iteratee`.\n *\n * Iteratee functions are called with a single argument (`value`), that is is the current item\n * in the collection being iterated over.\n *\n * @name map.f\n * @param {function} iteratee The iterate function to use while mapping.\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @returns {Array} The results of mapping `collection` to `iteratee`.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * map.f(square, [1, 2, 3]);            // => [1, 4, 9]\n * map.f(square, { a: 1, b: 2, c: 3 }); // => [1, 4, 9]\n * map.f(identity, 'foobar');           // => ['f', 'o', 'o', 'b', 'a', 'r']\n */\nexport const f = FunctionalFactory(map, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default map;\n"]}