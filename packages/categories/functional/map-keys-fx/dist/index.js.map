{"version":3,"sources":["index.js"],"names":["mapKeys","Empty","Results","prepare","getIteratee","handler","context","results","iteratee","i","value","key","collection","capped","f","arity","signature"],"mappings":"wZAoDMA,CAAAA,OAAO,CAAG,8BAAgB,CAC9BC,KAAK,CAAE,mBAAO,EAAP,CADuB,CAE9BC,OAAO,CAAE,mBAAO,EAAP,CAFqB,CAG9BC,OAAO,CAAEC,yBAHqB,CAI9BC,OAAO,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClEL,CAAO,CAACD,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACG,CAAD,CAApC,CAA4CH,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAArD,CAAP,CAAwFF,CACzF,CAN6B,CAAhB,C,CAqCHI,CAAC,CAAG,2BAAkBd,OAAlB,CAA2B,CAC1Ce,KAAK,CAAE,CADmC,CAE1CF,MAAM,GAFoC,CAG1CP,OAAO,CAAE,QAHiC,CAI1CU,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ+B,CAA3B,C,0BAOFhB,O","sourceRoot":"packages/categories/functional/map-keys-fx","sourcesContent":["/**\n * Exports the `mapValues` function.\n * @since 11/10/18\n * @file\n */\n\nimport getIteratee from '@foldr/internal-iteratee';\nimport IteratorFactory from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * Creates a new object with the same values as `collection` but with the keys mapped\n * using `iteratee`.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name mapKeys\n * @param {Object} collection The collection to map the keys of.\n * @param {function} iteratee The iteratee function to use while mapping keys.\n * @returns {Object} The results of mapping to keys of `collection` with `iteratee`.\n * @category object\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function uppercaseKey(value, key) {\n *   return key.toUpperCase();\n * }\n *\n * mapValues({ foo: 1, bar: 2, baz: 3 }, square); // => { FOO: 1, BAR: 2, BAZ: 3 }\n *\n * // Using the shorthand string iteratee you can\n * // map an object to a property of the object.\n *\n * const people = {\n *   1: { name: 'Ben', age: 21 },\n *   2: { name: 'John', age: 32 },\n *   3: { name: 'Al', age: 18 },\n * };\n *\n * mapKeys(people, 'name');\n * // => {\n * //  Ben: { name: 'Ben', age: 21 },\n * //  John: { name: 'John', age: 32 },\n * //  Al: { name: 'Al', age: 18 },\n * // }\n */\nconst mapKeys = IteratorFactory({\n  Empty: () => ({}),\n  Results: () => ({}),\n  prepare: getIteratee,\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    results[context && context.capped ? iteratee(key) : iteratee(value, key, collection)] = value;\n  },\n});\n\n/**\n * Functional, autocurried version of [mapKeys](#mapKeys).\n *\n * Creates a new object with the same values as `collection` but with the keys mapped\n * using `iteratee`.\n *\n * Iteratee functions are called with the signature `iteratee(key)`, where\n * `key` is the key of the current item in the collection that's being iterated over.\n *\n * @name mapKeys.f\n * @param {function} iteratee The iteratee function to use while mapping keys.\n * @param {Object} collection The collection to map the keys of.\n * @returns {Object} The results of mapping to keys of `collection` with `iteratee`.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function uppercaseKey(key) {\n *   return key.toUpperCase();\n * }\n *\n * mapKeys(square)({ foo: 1, bar: 2, baz: 3 }); // => { FOO: 1, BAR: 2, BAZ: 3 }\n */\nexport const f = FunctionalFactory(mapKeys, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default mapKeys;\n"]}