{"version":3,"sources":["index.js"],"names":["mapValues","Empty","Results","prepare","getIteratee","handler","context","results","iteratee","i","value","key","collection","capped","f","arity","signature"],"mappings":"wZAgDMA,CAAAA,SAAS,CAAG,8BAAgB,CAChCC,KAAK,CAAE,mBAAO,EAAP,CADyB,CAEhCC,OAAO,CAAE,mBAAO,EAAP,CAFuB,CAGhCC,OAAO,CAAEC,yBAHuB,CAIhCC,OAAO,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClEL,CAAO,CAACI,CAAD,CAAP,CAAeL,CAAO,EAAIA,CAAO,CAACO,MAAnB,CAA4BL,CAAQ,CAACE,CAAD,CAApC,CAA8CF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CACtE,CAN+B,CAAhB,C,CAgDLE,CAAC,CAAG,2BAAkBd,SAAlB,CAA6B,CAC5Ce,KAAK,CAAE,CADqC,CAE5CF,MAAM,GAFsC,CAG5CP,OAAO,CAAE,QAHmC,CAI5CU,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJiC,CAA7B,C,0BAOFhB,S","sourceRoot":"packages/categories/functional/map-values-fx","sourcesContent":["/**\n * Exports the `mapValues` function.\n * @since 11/10/18\n * @file\n */\n\nimport getIteratee from '@foldr/internal-iteratee';\nimport IteratorFactory from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * Creates a new object with the same keys as `collection` by mapping over `collection` and\n * calling `iteratee` for each value in the collection.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name mapValues\n * @param {Object} collection The collection to map the values of.\n * @param {function} iteratee The iteratee function to use while mapping values.\n * @returns {Object} The results of mapping the `collection` using `iteratee`.\n *\n * @category object\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * mapValues({ foo: 1, bar: 2, baz: 3 }, square); // => { foo: 1, bar: 4, baz: 9 }\n *\n * // Using the shorthand string iteratee you can\n * // map an object to a property of the object.\n *\n * const people = {\n *   1: { name: 'Ben', age: 21 },\n *   2: { name: 'John', age: 32 },\n *   3: { name: 'Al', age: 18 },\n * };\n *\n * mapValues(people, 'name'); // => { 1: 'Ben', 2: 'John', 3: 'Al' }\n */\nconst mapValues = IteratorFactory({\n  Empty: () => ({}),\n  Results: () => ({}),\n  prepare: getIteratee,\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    results[key] = context && context.capped ? iteratee(value) : iteratee(value, key, collection);\n  },\n});\n\n/**\n * Functional, autocurried version of [mapValues](#mapValues).\n *\n * Creates a new object with the same keys as `collection` by mapping over `collection` and\n * calling `iteratee` for each value in the collection.\n *\n * Iteratee functions are called with the signature `iteratee(value)`, where\n * `value` is the current item in the collection being iterated over.\n *\n * @name mapValues.f\n * @param {function} iteratee The iteratee function to use while mapping values.\n * @param {Object} collection The collection to map the values of.\n * @returns {Object} The results of mapping the `collection` using `iteratee`.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(x) {\n *   return x ** 2;\n * }\n *\n * mapValues.f(square, { foo: 1, bar: 2, baz: 3 }); // => { foo: 1, bar: 4, baz: 9 }\n *\n * // Using the shorthand string iteratee you can\n * // map an object to a property of the object.\n *\n * const people = {\n *   1: { name: 'Ben', age: 21 },\n *   2: { name: 'John', age: 32 },\n *   3: { name: 'Al', age: 18 },\n * };\n *\n * mapValues.f('name')(people); // => { 1: 'Ben', 2: 'John', 3: 'Al' }\n */\nexport const f = FunctionalFactory(mapValues, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default mapValues;\n"]}