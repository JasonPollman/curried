{"version":3,"sources":["index.js"],"names":["identity","x","preparePickIteratee","iteratee","constructor","Function","Array","value","key","indexOf","pick","Empty","Results","prepare","handler","context","results","i","collection","capped","f","arity","signature"],"mappings":"uUAeA,QAASA,CAAAA,QAAT,CAAkBC,CAAlB,CAAqB,CACnB,MAAOA,CAAAA,CACR,CAUD,QAASC,CAAAA,mBAAT,CAA6BC,CAA7B,CAAuC,CACrC,GAAgB,IAAZ,EAAAA,CAAJ,CAAsB,MAAOH,CAAAA,QAAP,CAEtB,OAAQG,CAAQ,CAACC,WAAjB,EACE,IAAKC,CAAAA,QAAL,CAAe,MAAOF,CAAAA,CAAP,CAEf,IAAKG,CAAAA,KAAL,CAAY,MAAO,UAAgBC,CAAhB,CAAuBC,CAAvB,CAA4B,CAC7C,MAA+B,CAAC,CAAzB,CAAAL,CAAQ,CAACM,OAAT,CAAiBD,CAAjB,CACR,CAFW,CAMZ,QAAS,MAAOR,CAAAA,QAAP,CATX,CAWD,C,GAkCKU,CAAAA,IAAI,CAAG,8BAAS,CACpBC,KAAK,CAAE,mBAAO,EAAP,CADa,CAEpBC,OAAO,CAAE,mBAAO,EAAP,CAFW,CAGpBC,OAAO,CAAEX,mBAHW,CAIpBY,OAAO,CAAE,WAACC,CAAD,CAAUC,CAAV,CAAmBb,CAAnB,CAA6Bc,CAA7B,CAAgCV,CAAhC,CAAuCC,CAAvC,CAA4CU,CAA5C,CAA2D,CAClE,GAAIH,CAAO,EAAIA,CAAO,CAACI,MAAnB,CAA4BhB,CAAQ,CAACI,CAAD,CAAQC,CAAR,CAApC,CAAmDL,CAAQ,CAACI,CAAD,CAAQC,CAAR,CAAaU,CAAb,CAA/D,CAAyF,CACvFF,CAAO,CAACR,CAAD,CAAP,CAAeD,CAChB,CACF,CARmB,CAAT,C,CA2CAa,CAAC,CAAG,2BAAkBV,IAAlB,CAAwB,CACvCW,KAAK,CAAE,CADgC,CAEvCF,MAAM,GAFiC,CAGvCJ,OAAO,CAAE,QAH8B,CAIvCO,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ4B,CAAxB,C,0BAOFZ,I","sourceRoot":"packages/categories/functional/pick-fx","sourcesContent":["/**\n * Exports the `pick` function.\n * @since 11/10/18\n * @file\n */\n\nimport iterator from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/**\n * The identity function.\n * Returns the value of the first argument provided to it.\n * @param {any} x The value to passthrough.\n * @returns {any} The value of `x`.\n */\nfunction identity(x) {\n  return x;\n}\n\n/* eslint-disable no-param-reassign */\n\n/**\n * Gets the pick iteratee.\n * Pick iteratees can be only functions or arrays.\n * @param {any} iteratee The input iteratee value.\n * @returns {function|undefined} The *real* iteratee for the pick function.\n */\nfunction preparePickIteratee(iteratee) {\n  if (iteratee == null) return identity;\n\n  switch (iteratee.constructor) {\n    case Function: return iteratee;\n\n    case Array: return function picker(value, key) {\n      return iteratee.indexOf(key) > -1;\n    };\n\n    // Iternal Iterator will return the empty results\n    // object in the case `iteratee` isn't a function.\n    default: return identity;\n  }\n}\n\n/**\n * Creates a new object by \"picking\" (or selecting) the given properties.\n *\n * Iteratee functions are called with the signature `iteratee(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name pick\n * @param {Object} collection The collection to pick from.\n * @param {Array|function} iteratee The iteratee function to use while picking. If given\n * an array, all of the own properties of `collection` that exist in the array will be\n * picked, all other values will be ignored.\n * @returns {Object} A new object with only the picked values.\n *\n * @category object\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * const data = {\n *   foo: 'foo',\n *   bar: 'bar',\n *   baz: 'baz',\n * };\n *\n * // Using array shorthand\n * pick(data, ['foo', 'baz']); // => { foo: 'foo', baz: 'baz' }\n *\n * // Using function\n * pick(data, (value, key) => value[0] === 'b'); // => { bar: 'bar', baz: 'baz' }\n */\nconst pick = iterator({\n  Empty: () => ({}),\n  Results: () => ({}),\n  prepare: preparePickIteratee,\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? iteratee(value, key) : iteratee(value, key, collection)) {\n      results[key] = value;\n    }\n  },\n});\n\n/**\n * Functional, autocurried version of [pick](#pick).\n * Creates a new object by \"picking\" (or selecting) the given properties.\n *\n * Iteratee functions are called with the signature `iteratee(value)`, where\n * `value` is the current item in the collection being iterated over.\n *\n * @name pick.f\n * @param {Array|function} iteratee The iteratee function to use while picking. If given\n * an array, all of the own properties of `collection` that exist in the array will be\n * picked, all other values will be ignored.\n * @param {Object} collection The collection to pick from.\n * @returns {Object} A new object with only the picked values.\n *\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * const data = {\n *   foo: 'foo',\n *   bar: 'bar',\n *   baz: 'baz',\n * };\n *\n * // Using array shorthand\n * pick.f(['foo', 'baz'], data); // => { foo: 'foo', baz: 'baz' }\n *\n * // Using function\n * pick.f((value, key) => value[0] === 'b')(data); // => { bar: 'bar', baz: 'baz' }\n */\nexport const f = FunctionalFactory(pick, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default pick;\n"]}