{"version":3,"sources":["index.js"],"names":["$$empty","x","$$unwrap","results","$$results","$$handler","context","iteratee","i","value","key","collection","capped"],"mappings":"2FAAA,kF,qFAwCe,8BAAS,CACtBA,OAAO,CAAE,WAAAC,CAAC,QAAIA,CAAAA,CAAJ,CADY,CAEtBC,QAAQ,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAAC,CAAD,CAAX,CAFK,CAGtBC,SAAS,CAAE,WAAAH,CAAC,QAAI,CAACA,CAAD,CAAJ,CAHU,CAItBI,SAAS,CAAE,WAACC,CAAD,CAAUH,CAAV,CAAmBI,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAEpER,CAAO,CAAC,CAAD,CAAP,CAAaG,CAAO,EAAIA,CAAO,CAACM,MAAnB,CACTL,CAAQ,CAACJ,CAAO,CAAC,CAAD,CAAR,CAAaM,CAAb,CADC,CAETF,CAAQ,CAACJ,CAAO,CAAC,CAAD,CAAR,CAAaM,CAAb,CAAoBC,CAApB,CAAyBC,CAAzB,CACb,CATqB,CAAT,C","sourceRoot":"packages/categories/functional/reduce-fx","sourcesContent":["import iterator from '@foldr/internal-iterator';\n\n/**\n * This function is similar to Array#reduce except that it works for collections and guards\n * against bad input.\n *\n * A collection is an Array, Object, String, Map, Set, or Arguments object.\n *\n * Iterates over `collection`, calling `reducer` for each item in the collection and returning\n * the accumulation of the successive calls to `reducer`. Each invocation of `reducer` becomes\n * the \"reduced\" value of the previous call.\n *\n * Reduction functions are called with the signature\n * `reducer(accumulator, value, key, collection)`, where:\n * - `accumulator` is either the initial value or the results of a previous `reducer` call.\n * - `value` is the current item in the collection being iterated over,\n * - `key` is the key of the current item in the collection being iterated over\n * - `collection` is the passed in collection.\n *\n * @name reduce\n * @param {Array|Object|String|Map|Set|Arguments} collection The collection to reduce.\n * @param {function} reducer The reduction function to use while folding.\n * @param {any} initial The inital, \"primer\" value for folding.\n * @returns {Array} The results of folding `collection` onto `reducer`.\n *\n * @arity 3\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { reduce } from '@foldr/reduce';\n *\n * function square(acc, x) {\n *   return acc + x ** 2;\n * }\n *\n * reduce([1, 2, 3], square, 0); // => 14\n */\nexport default iterator({\n  $$empty: x => x,\n  $$unwrap: results => results[0],\n  $$results: x => [x],\n  $$handler: (context, results, iteratee, i, value, key, collection) => {\n    // eslint-disable-next-line no-param-reassign\n    results[0] = context && context.capped\n      ? iteratee(results[0], value)\n      : iteratee(results[0], value, key, collection);\n  },\n});\n"]}