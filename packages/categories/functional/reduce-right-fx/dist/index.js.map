{"version":3,"sources":["index.js"],"names":["foldRight","Empty","x","unwrap","results","reverse","Results","initial","handler","context","iteratee","i","value","key","collection","capped","f","arity","signature"],"mappings":"0UAiCMA,CAAAA,SAAS,CAAG,8BAAgB,CAChCC,KAAK,CAAE,WAAAC,CAAC,QAAIA,CAAAA,CAAJ,CADwB,CAEhCC,MAAM,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAAC,CAAD,CAAX,CAFiB,CAGhCC,OAAO,GAHyB,CAIhCC,OAAO,CAAE,WAAAJ,CAAC,QAAI,CAACA,CAAD,CAAJ,CAJsB,CAKhCK,OAAO,GALyB,CAMhCC,OAAO,CAAE,WAACC,CAAD,CAAUL,CAAV,CAAmBM,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClEV,CAAO,CAAC,CAAD,CAAP,CAAaK,CAAO,EAAIA,CAAO,CAACM,MAAnB,CACTL,CAAQ,CAACN,CAAO,CAAC,CAAD,CAAR,CAAaQ,CAAb,CADC,CAETF,CAAQ,CAACN,CAAO,CAAC,CAAD,CAAR,CAAaQ,CAAb,CAAoBC,CAApB,CAAyBC,CAAzB,CACb,CAV+B,CAAhB,C,CAoCLE,CAAC,CAAG,2BAAkBhB,SAAlB,CAA6B,CAC5CiB,KAAK,CAAE,CADqC,CAE5CF,MAAM,GAFsC,CAG5CN,OAAO,CAAE,QAHmC,CAI5CS,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAJiC,CAA7B,C,0BAOFlB,S","sourceRoot":"packages/categories/functional/reduce-right-fx","sourcesContent":["/**\n * Exports the `fold` function.\n * @since 11/10/18\n * @file\n */\n\nimport IteratorFactory from '@foldr/internal-iterator';\nimport FunctionalFactory from '@foldr/internal-fmake';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * This function is similar to `fold`, except that iteration is performed from right to left.\n * Some libraries call this `reduceRight`.\n *\n * @name foldRight\n * @param {Array|Object|String|Arguments} collection The collection to fold or \"reduce\".\n * @param {function} reducer The reduction function to use while folding.\n * @param {any} initial The inital, \"primer\" value for folding.\n * @returns {Array} The results of folding `collection` onto `reducer`.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(acc, x) {\n *   return acc + x ** 2;\n * }\n *\n * foldRight([1, 2, 3], square, 0); // => 14\n */\nconst foldRight = IteratorFactory({\n  Empty: x => x,\n  unwrap: results => results[0],\n  reverse: true,\n  Results: x => [x],\n  initial: true,\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    results[0] = context && context.capped\n      ? iteratee(results[0], value)\n      : iteratee(results[0], value, key, collection);\n  },\n});\n\n/**\n * Functional, autocurried version of [fold](#fold).\n *\n * @name foldRight.f\n * @param {Array|Object|String|Arguments} collection The collection to fold or \"reduce\".\n * @param {any} initial The inital, \"primer\" value for folding.\n * @param {function} reducer The reduction function to use while folding.\n * @returns {Array} The results of folding `collection` onto `reducer`.\n *\n * @arity 3\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function square(acc, x) {\n *   return acc + x ** 2;\n * }\n *\n * foldRight.f(square, 0)([1, 2, 3]); // => 14\n */\nexport const f = FunctionalFactory(foldRight, {\n  arity: 3,\n  capped: true,\n  context: 'config',\n  signature: [2, 0, 1],\n});\n\nexport default foldRight;\n"]}