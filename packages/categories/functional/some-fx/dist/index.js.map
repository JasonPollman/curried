{"version":3,"sources":["index.js"],"names":["some","unwrap","results","Empty","Results","handler","context","iteratee","i","value","key","collection","capped","BREAK","f","arity","signature"],"mappings":"+pBA8CMA,CAAAA,IAAI,CAAG,8BAAS,CACpBC,MAAM,CAAE,WAAAC,CAAO,QAAIA,CAAAA,CAAO,CAAC,CAAD,CAAX,CADK,CAEpBC,KAAK,CAAE,sBAFa,CAGpBC,OAAO,CAAE,mBAAM,IAAN,CAHW,CAIpBC,OAAO,CAAE,WAACC,CAAD,CAAUJ,CAAV,CAAmBK,CAAnB,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAuCC,CAAvC,CAA4CC,CAA5C,CAA2D,CAClE,GAAIL,CAAO,EAAIA,CAAO,CAACM,MAAnB,CAA4B,CAACL,CAAQ,CAACE,CAAD,CAArC,CAA+C,CAACF,CAAQ,CAACE,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAA5D,CAAsF,CACpF,MACD,CAEDT,CAAO,CAAC,CAAD,CAAP,IACA,MAAOW,wBACR,CAXmB,CAAT,C,CAiDAC,CAAC,CAAG,2BAAkBd,IAAlB,CAAwB,CACvCe,KAAK,CAAE,CADgC,CAEvCH,MAAM,GAFiC,CAGvCN,OAAO,CAAE,QAH8B,CAIvCU,SAAS,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJ4B,CAAxB,C,0BAOFhB,I","sourceRoot":"packages/categories/functional/some-fx","sourcesContent":["/**\n * Exports the `some` function.\n * @since 11/10/18\n * @file\n */\n\nimport FunctionalFactory from '@foldr/internal-fmake';\nimport iterator, { BREAK } from '@foldr/internal-iterator';\n\n/* eslint-disable no-param-reassign */\n\n/**\n * This function is similar to `Array#some` except that is works for Array, Object, String,\n * Map, Set, and Arguments objects.\n *\n * Iterates over `collection`, calling `predicate` for each item in the collection. If `predicate`\n * returns truthy, iteration is broken and `true` is returned. Otherwise `false` is returned.\n *\n * Predicate functions are called with the signature `predicate(value, key, collection)`, where\n * `value` is the current item in the collection, `key` is the key of the current item in the\n * collection, and `collection` is collection.\n *\n * @name some\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @param {function} predicate The predicate iteratee function.\n * @returns {boolean} True if any item in the collection returns `true`\n * for `predicate`, false otherwise.\n *\n * @category collection\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * some([1, 2, 3], isEven);            // => true\n * some([2, 4, 6], isEven);            // => true\n * some([1, 3, 5], isEven);            // => false\n *\n * some({ a: 1, b: 2, c: 3 }, isEven); // => true\n * some({ a: 2, b: 4, c: 6 }, isEven); // => true\n * some({ a: 1, b: 3, c: 5 }, isEven); // => false\n */\nconst some = iterator({\n  unwrap: results => results[0],\n  Empty: () => false,\n  Results: () => [false],\n  handler: (context, results, iteratee, i, value, key, collection) => {\n    if (context && context.capped ? !iteratee(value) : !iteratee(value, key, collection)) {\n      return undefined;\n    }\n\n    results[0] = true;\n    return BREAK;\n  },\n});\n\n/**\n * Functional, autocurried version of [some](#some).\n *\n * Iterates over `collection`, calling `predicate` for each item in the collection. If `predicate`\n * returns truthy, iteration is broken and `true` is returned. Otherwise `false` is returned.\n *\n * Predicate functions are called with the signature `predicate(value)`, where\n * `value` is the current item in the collection being iterated over.\n *\n * @name some.f\n * @param {function} predicate The predicate iteratee function.\n * @param {Array|Object|String|Arguments} collection The collection to iterate over.\n * @returns {boolean} True if any item in the collection returns `true`\n * for `predicate`, false otherwise.\n *\n * @arity 2\n * @autocurried\n * @category functional\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * function isEven(x) {\n *   return x % 2 === 0;\n * }\n *\n * some.f(isEven, [1, 2, 3]);            // => true\n * some.f(isEven, [2, 4, 6]);            // => true\n * some.f(isEven)([1, 3, 5]);            // => false\n *\n * some.f(isEven, { a: 1, b: 2, c: 3 }); // => true\n * some.f(isEven)({ a: 2, b: 4, c: 6 }); // => true\n * some.f(isEven, { a: 1, b: 3, c: 5 }); // => false\n */\nexport const f = FunctionalFactory(some, {\n  arity: 2,\n  capped: true,\n  context: 'config',\n  signature: [1, 0],\n});\n\nexport default some;\n"]}