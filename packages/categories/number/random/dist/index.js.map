{"version":3,"sources":["index.js"],"names":["rand","Math","random","randomBase","min","max","floating","value","lower","upper","arguments","length"],"mappings":"2FAMA,kE,wEAIA,GAAMA,CAAAA,IAAI,CAAGC,IAAI,CAACC,MAAlB,CASA,QAASC,CAAAA,UAAT,CAAoBC,CAApB,CAAyBC,CAAzB,CAA8BC,CAA9B,CAAwC,CACtC,GAAMC,CAAAA,CAAK,CAAIP,IAAI,IAAMK,CAAG,CAAGD,CAAZ,CAAL,CAAyBA,CAAvC,CACA,MAAOE,CAAAA,CAAQ,CAAGC,CAAH,CAAoB,CAAR,CAAAA,CAC5B,CAsCc,QAASL,CAAAA,MAAT,CAAgBM,CAAhB,CAAuBC,CAAvB,CAA8BH,CAA9B,CAAwC,CACrD,OAAQI,SAAS,CAACC,MAAlB,EACE,IAAK,EAAL,CACE,MAAOR,CAAAA,UAAU,CAAC,CAAD,CAAI,CAAJ,IAAjB,CAEF,IAAK,EAAL,CACE,MAAOA,CAAAA,UAAU,CAAC,CAAD,CAAI,sBAASK,CAAT,CAAJ,CAAqBA,CAAK,CAAG,CAA7B,CAAjB,CAEF,IAAK,EAAL,CACEA,CAAK,CAAG,sBAASA,CAAT,CAAR,CACAC,CAAK,CAAG,sBAASA,CAAT,CAAR,CACA,MAAON,CAAAA,UAAU,CAACK,CAAD,CAAQC,CAAR,CAAeD,CAAK,CAAG,CAAR,EAAaC,CAAK,CAAG,CAApC,CAAjB,CAEF,QACE,MAAON,CAAAA,UAAU,CAAC,sBAASK,CAAT,CAAD,CAAkB,sBAASC,CAAT,CAAlB,CAAmCH,CAAnC,CAAjB,CAbJ,CAeD","sourceRoot":"packages/categories/number/random","sourcesContent":["/**\n * Exports the `toRandom` function.\n * @since 11/14/18\n * @file\n */\n\nimport toFinite from '@foldr/to-finite';\n\n/* eslint-disable no-bitwise, no-param-reassign */\n\nconst rand = Math.random;\n\n/**\n * Base functionality for `random` function.\n * @param {number} min The minimum random value.\n * @param {number} max The maximum random value.\n * @param {boolean} floating True for floating points, false to drop the float.\n * @returns {random} A random number.\n */\nfunction randomBase(min, max, floating) {\n  const value = (rand() * (max - min)) + min;\n  return floating ? value : (value | 0);\n}\n\n/**\n * Gets a random number in the given range (inclusive).\n *\n * If no `upper` value is given the random number returned will be\n * in the range `0` to `lower`.\n *\n * If `floating` is explicitly passed, the returned value will be\n * a floating point number if `floating` is truthy and an integer\n * it `floating` is falsy.\n *\n * If `floating` isn't passed, then if either `upper` or `lower`\n * are floats `floating` will be `true`.\n *\n * If either `lower` or `upper` are `Infinity`, they will be clamped\n * to `Number.MIN_VALUE` or `Number.MAX_VALUE` respectively.\n *\n * @name random\n * @param {number} lower The inclusive lower range of the random number.\n * @param {number} upper The inclusive upper range of the random number.\n * @param {boolean=} floating True to get a random float, false for an integer.\n * @returns {number} A random number.\n *\n * @category number\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * random(0, 10);       // => Random number between 0..10, inclusive\n * random(5, 10);       // => Random number between 5..10, inclusive\n * random(5);           // => Random number between 0..5, inclusive\n * random(5.01, 5.99);  // => Random number between 5.01..5.99, inclusive\n * random();            // => Either 0 or 1.\n *\n * toFinite({ valueOf() { return 5; } }) // => 5\n */\nexport default function random(lower, upper, floating) {\n  switch (arguments.length) {\n    case 0:\n      return randomBase(0, 1, false);\n\n    case 1:\n      return randomBase(0, toFinite(lower), lower % 1);\n\n    case 2:\n      lower = toFinite(lower);\n      upper = toFinite(upper);\n      return randomBase(lower, upper, lower % 1 || upper % 1);\n\n    default:\n      return randomBase(toFinite(lower), toFinite(upper), floating);\n  }\n}\n"]}