{"version":3,"sources":["index.js"],"names":["isFinitePolyfill","x","isFinite","Number"],"mappings":"qIAMA,kE,wEAWO,QAASA,CAAAA,gBAAT,CAA0BC,CAA1B,CAA6B,CAClC,MAAO,sBAASA,CAAT,GAAeC,QAAQ,CAACD,CAAD,CAC/B,C,aAkBcE,MAAM,CAACD,QAAP,EAA8CF,gB","sourceRoot":"packages/categories/types/is-finite","sourcesContent":["/**\n * Exports the `isFinite` function.\n * @since 10/23/18\n * @file\n */\n\nimport isNumber from '@foldr/is-number';\n\n/**\n * Determines if the given item is a finite number. That is both a number and not Infinity.\n * This version is based on the `Number.isFinite` polyfill from\n * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill).\n * Exporting this for testing purposes only.\n * @param {any} x The value to assert finiteness.\n * @returns {boolean} True if `x` is a finite, false otherwise.\n * @export\n */\nexport function isFinitePolyfill(x) {\n  return isNumber(x) && isFinite(x); // eslint-disable-line no-restricted-globals\n}\n\n/**\n * Determines if the given item is a finite primitive number (a number and not Infinity).\n *\n * @name isFinite\n * @param {any} x The value to assert finiteness.\n * @returns {boolean} True if `x` is a finite, false otherwise.\n *\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * isFinite(1);         // => true\n * isFinite(Infinity);  // => false\n */\nexport default Number.isFinite || /* istanbul ignore next */ isFinitePolyfill;\n"]}