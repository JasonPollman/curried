{"version":3,"sources":["index.js"],"names":["floor","Math","trunc","isIntegerPolyfill","x","Number","isInteger"],"mappings":"uIAQA,kE,wEAOA,GAAMA,CAAAA,KAAK,CAAGC,IAAI,CAACC,KAAL,EAAcD,IAAI,CAACD,KAAjC,CAUO,QAASG,CAAAA,iBAAT,CAA2BC,CAA3B,CAA8B,CACnC,MAAO,sBAASA,CAAT,GAAeJ,KAAK,CAACI,CAAD,CAAL,GAAaA,CACpC,C,aAkBcC,MAAM,CAACC,SAAP,EAA+CH,iB","sourceRoot":"packages/categories/types/is-integer","sourcesContent":["/**\n * Exports the `isInteger` function.\n * @since 10/23/18\n * @file\n */\n\n/* eslint-disable no-bitwise */\n\nimport isFinite from '@foldr/is-finite';\n\n// Use Math.trunc if it's available, since\n// it behaves more like a bitwise operation\n// but work for both 32 and 64 bit numbers.\n\n/* istanbul ignore next */\nconst floor = Math.trunc || Math.floor;\n\n/**\n * Determines if the given item is an integer.\n * This is based on the `Number.isInteger` polyfill from\n * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill).\n * @param {any} x The value to assert.\n * @returns {boolean} True if `x` is an integer, false otherwise.\n * @export\n */\nexport function isIntegerPolyfill(x) {\n  return isFinite(x) && floor(x) === x;\n}\n\n/**\n * Determines if the given item is an integer.\n *\n * @name isInteger\n * @param {any} x The value to assert.\n * @returns {boolean} True if `x` is an integer, false otherwise.\n *\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * isInteger(1);    // => true\n * isInteger(1.01); // => false\n */\nexport default Number.isInteger || /* istanbul ignore next */ isIntegerPolyfill;\n"]}