{"version":3,"sources":["index.js"],"names":["getPrototypeOf","Object","hasObjectConstructorNode","x","constructor","hasObjectConstructorBrowser","hasObjectConstructor","IS_NODE","isPlainObject"],"mappings":"meAUQA,CAAAA,c,CAAmBC,M,CAAnBD,c,CAQD,QAASE,CAAAA,wBAAT,CAAkCC,CAAlC,CAAqC,CAC1C,MAAOA,CAAAA,CAAC,CAACC,WAAF,GAAkBH,MAC1B,CASM,QAASI,CAAAA,2BAAT,CAAqCF,CAArC,CAAwC,CAC7C,MAAOA,CAAAA,CAAC,CAACC,WAAF,GAAkBH,MAAlB,EAA+C,iBAAnB,4BAAYE,CAAZ,CACpC,CAED,GAAMG,CAAAA,oBAAoB,CAAGC,qBACzBL,wBADyB,CAGzBG,2BAHJ,CA0Be,QAASG,CAAAA,aAAT,CAAuBL,CAAvB,CAA0B,CACvC,MAAO,0BAAaA,CAAb,IAAoBG,oBAAoB,CAACH,CAAD,CAApB,EAAiD,IAAtB,GAAAH,cAAc,CAACG,CAAD,CAA7D,CACR","sourceRoot":"packages/categories/types/is-plain-object","sourcesContent":["/**\n * Exports the `isNumber` function.\n * @since 9/25/18\n * @file\n */\n\nimport toStringTag from '@foldr/to-string-tag';\nimport isObjectLike from '@foldr/is-object-like';\nimport { IS_NODE } from '@foldr/internal-env';\n\nconst { getPrototypeOf } = Object;\n\n/**\n * Determines if `x`'s constructor is `Object`.\n * @param {any} x The value to check.\n * @returns {boolean} True if `x` is an instance of Object.\n * @export\n */\nexport function hasObjectConstructorNode(x) {\n  return x.constructor === Object;\n}\n\n/**\n * Determines if `x`'s constructor is `Object`.\n * This version is for browsers, and works cross-frame.\n * @param {any} x The value to check.\n * @returns {boolean} True if `x` is an instance of Object.\n * @export\n */\nexport function hasObjectConstructorBrowser(x) {\n  return x.constructor === Object || toStringTag(x) === '[object Object]';\n}\n\nconst hasObjectConstructor = IS_NODE\n  ? hasObjectConstructorNode\n  /* istanbul ignore next */\n  : hasObjectConstructorBrowser;\n\n/**\n * Determines if the given item is a \"plain object\". That is an object that\n * is a direct (non-inherited) instance of the Object class.\n *\n * @name isPlainObject\n * @param {any} x The value to determine whether or not it's a plain object.\n * @returns {boolean} True if `x` is a plain object, false otherwise.\n *\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * isPlainObject({});                  // => true\n * isPlainObject([]);                  // => true\n * isPlainObject(() => {});            // => false\n * isPlainObject('foo');               // => false\n * isPlainObject(new class Foo{}());   // => false\n * isPlainObject(Object.create(null)); // => true\n */\nexport default function isPlainObject(x) {\n  return isObjectLike(x) && (hasObjectConstructor(x) || getPrototypeOf(x) === null);\n}\n"]}