{"version":3,"sources":["index.js"],"names":["isPromiseBase","Promise","isThenable","x","then","catch","isPromise"],"mappings":"8FAMA,qD,2EAEMA,CAAAA,aAAa,CAAsB,UAAnB,QAAOC,CAAAA,OAAP,CAAgC,gBAAGA,OAAH,CAAhC,CAAyE,oB,CAOzFC,UAAU,CAAG,SAAAC,CAAC,QAAsB,UAAlB,QAAOA,CAAAA,CAAC,CAACC,IAAT,EAAmD,UAAnB,QAAOD,CAAAA,CAAC,CAACE,KAA7C,C,CAoBL,QAASC,CAAAA,SAAT,CAAmBH,CAAnB,CAAsB,CACnC,MAAOH,CAAAA,aAAa,CAACG,CAAD,CAAb,EAAqB,CAAC,CAACA,CAAF,EAAOD,UAAU,CAACC,CAAD,CAC9C","sourceRoot":"packages/categories/types/is-promise","sourcesContent":["/**\n * Exports the `isPromise` function.\n * @since 9/25/18\n * @file\n */\n\nimport is from '@foldr/is';\n\nconst isPromiseBase = typeof Promise === 'function' ? is(Promise) : /* istanbul ignore next */ () => false;\n\n/**\n * Determines if an object has both a `.then` and `.catch` method.\n * @param {Object} x The object to determine \"thenable-ness\" of.\n * @returns {boolean} True if `x` is thenable, false otherwise.\n */\nconst isThenable = x => typeof x.then === 'function' && typeof x.catch === 'function';\n\n/**\n * Determines if the given item is a Promise object.\n * That is, if it's a native Promise or it's `thenable` (contains `.then` and `.catch` functions).\n *\n * @name isPromise\n * @param {any} x The value to determine whether or not it's a Promise.\n * @returns {boolean} True if `x` is a Promise, false otherwise.\n *\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * isPromise(Promise.resolve()); // => true\n * isPromise(Promise.reject());  // => true\n * isPromise('foobar');          // => false\n */\nexport default function isPromise(x) {\n  return isPromiseBase(x) || (!!x && isThenable(x));\n}\n"]}