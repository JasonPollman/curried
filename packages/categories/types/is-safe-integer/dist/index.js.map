{"version":3,"sources":["index.js"],"names":["isSafeIntegerPolyfill","x","Math","abs","Number","MAX_SAFE_INTEGER","isSafeInteger"],"mappings":"+IAOA,oE,wEAQO,QAASA,CAAAA,qBAAT,CAA+BC,CAA/B,CAAkC,CACvC,MAAO,uBAAUA,CAAV,GAAgBC,IAAI,CAACC,GAAL,CAASF,CAAT,GAAeG,MAAM,CAACC,gBAC9C,C,aAsBcD,MAAM,CAACE,aAAP,EAAmDN,qB","sourceRoot":"packages/categories/types/is-safe-integer","sourcesContent":["/**\n * Exports the `isSafeInteger` function.\n * This is based off the MDN polyfill:\n * @since 9/25/18\n * @file\n */\n\nimport isInteger from '@foldr/is-integer';\n\n/**\n * This is based on the polyfill from\n * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\n * @param {any} x The value to check.\n * @returns {boolean} True if `x` is a safe integer, false otherwise.\n */\nexport function isSafeIntegerPolyfill(x) {\n  return isInteger(x) && Math.abs(x) <= Number.MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n * double precision number which isn't the result of a rounded unsafe integer.\n *\n * @name isSafeInteger\n * @param {any} x The value to check.\n * @returns {boolean} True if `x` is a safe integer, false otherwise.\n *\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * isSafeInterger(0);        // => true\n * isSafeInterger(10);       // => true\n * isSafeInterger(NaN);      // => false\n * isSafeInterger(1.1);      // => false\n * isSafeInterger(Infinity); // => false\n */\nexport default Number.isSafeInteger || /* istanbul ignore next */ isSafeIntegerPolyfill;\n"]}