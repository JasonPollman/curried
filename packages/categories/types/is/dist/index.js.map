{"version":3,"sources":["index.js"],"names":["isNodeCheck","Constructor","x","constructor","isBrowserCheck","name","F","isCheck","IS_NODE","is","value","isValidConstructor","arguments","length"],"mappings":"0VASO,QAASA,CAAAA,WAAT,CAAqBC,CAArB,CAAkCC,CAAlC,CAAqC,CAC1C,MAAY,KAAL,EAAAA,CAAC,GAAaA,CAAC,CAACC,WAAF,GAAkBF,CAAlB,EAAiCC,CAAC,WAAYD,CAAAA,CAA3D,CACT,CASM,QAASG,CAAAA,cAAT,CAAwBH,CAAxB,CAAqCC,CAArC,CAAwC,CAC7C,MAAOF,CAAAA,WAAW,CAACC,CAAD,CAAcC,CAAd,CAAX,EAA+B,yBAAYA,CAAZ,sBAA8BD,CAAW,CAACI,IAA1C,KACvC,C,GAMKC,CAAAA,CAAC,CAAG,oB,CACJC,OAAO,CAAGC,qBAAUR,WAAV,CAAmDI,c,CAoCpD,QAASK,CAAAA,EAAT,CAAYR,CAAZ,CAAyBS,CAAzB,CAAgC,CAC7C,GAAMC,CAAAA,CAAkB,CAA0B,UAAvB,QAAOV,CAAAA,CAAlC,CAGA,GAAuB,CAAnB,CAAAW,SAAS,CAACC,MAAd,CAA0B,MAAOF,CAAAA,CAAkB,CAAGJ,OAAO,CAACN,CAAD,CAAcS,CAAd,CAAV,GAAzB,CAC1B,GAAI,CAACC,CAAL,CAAyB,MAAOL,CAAAA,CAAP,CAEzB,MAAO,UAA+BJ,CAA/B,CAAkC,CACvC,MAAOK,CAAAA,OAAO,CAACN,CAAD,CAAcC,CAAd,CACf,CACF","sourceRoot":"packages/categories/types/is","sourcesContent":["import toStringTag from '@foldr/to-string-tag';\nimport { IS_NODE } from '@foldr/internal-env';\n\n/**\n * Determines if `x` is an instance of `Constructor`.\n * @param {function} Constructor The constructor to test membership of.\n * @param {any} x The thing to test.\n * @returns {boolean} True if `thing` is a `Constructor` instance, false otherwise.\n */\nexport function isNodeCheck(Constructor, x) {\n  return x != null && (x.constructor === Constructor || x instanceof Constructor);\n}\n\n/**\n * Determines if `x` is an instance of `Constructor`.\n * This version is for browsers and works cross-frame.\n * @param {function} Constructor The constructor to test membership of.\n * @param {any} x The thing to test.\n * @returns {boolean} True if `thing` is a `Constructor` instance, false otherwise.\n */\nexport function isBrowserCheck(Constructor, x) {\n  return isNodeCheck(Constructor, x) || toStringTag(x) === `[object ${Constructor.name}]`;\n}\n\n/**\n * Constant false function.\n * @returns {boolean} The literal `false`.\n */\nconst F = () => false;\nconst isCheck = IS_NODE ? isNodeCheck : /* istanbul ignore next */ isBrowserCheck;\n\n/**\n * Determines if the given value is an instance of `Constructor`.\n * @param {function} Constructor The constructor to test for membership of.\n * @param {any} value The value to test.\n * @returns {boolean} True if `value` is a `Constructor` instance, false otherwise.\n *\n * @name is\n * @autocurried\n * @category types\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { is } from '@foldr/is';\n *\n * is(Object, {});    // => true\n * is(String, 'foo'); // => true\n * is(String, {});    // => false\n *\n * // Note, `is` is curried, so you can do things like...\n *\n * class Point {\n *   constructor(x, y) {\n *      this.x = x;\n *      this.y = y;\n *   }\n * }\n *\n * const isPoint = is(Point);\n *\n * isPoint(new Point(0, 1)); // => true\n * isPoint({});              // => false\n */\nexport default function is(Constructor, value) {\n  const isValidConstructor = typeof Constructor === 'function';\n\n  // For performance reasons, simulating curry here.\n  if (arguments.length > 1) return isValidConstructor ? isCheck(Constructor, value) : false;\n  if (!isValidConstructor) return F;\n\n  return function isConstructorInstance(x) {\n    return isCheck(Constructor, x);\n  };\n}\n"]}