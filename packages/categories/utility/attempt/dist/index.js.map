{"version":3,"sources":["index.js"],"names":["attempt","fn","args","fallback","apply","e","arguments","length"],"mappings":"4FAAA,kE,wEAyCe,QAASA,CAAAA,OAAT,CAAiBC,CAAjB,CAAqBC,CAArB,CAA2BC,CAA3B,CAAqC,CAClD,GAAI,CACF,MAAOF,CAAAA,CAAE,CAACG,KAAH,QAAoB,sBAASF,CAAT,EAAiBA,CAAjB,OAApB,CACR,CAAC,MAAOG,CAAP,CAAU,CACV,MAA0B,EAAnB,CAAAC,SAAS,CAACC,MAAV,CAAuBJ,CAAvB,CAAkCE,CAC1C,CACF","sourceRoot":"packages/categories/utility/attempt","sourcesContent":["import isObject from '@foldr/is-object';\n\n/**\n * *Attempts* to invoke `fn`.\n *\n * Invokes and returns the return value from `fn`. If the call to `fn` throws,\n * either the `fallback` value (if provided) or the caught error is returned.\n *\n * @name attempt\n * @param {function} fn The function to attempt to invoke.\n * @param {Array|Arguments=} args An array of arguments to pass to `fn`.\n * @param {any=} fallback The fallback value to use if `fn` throws.\n * @returns {any} The return value from `fn`, `fallback`, or the caught error.\n *\n * @arity 3\n * @category utility\n * @publishdoc\n * @since v0.0.0\n * @export\n * @example\n *\n * import { attempt } from '@foldr/all';\n *\n * function assertIsPositive() {\n *    if (x < 0) throw new Error('x must be a positive number');\n *    return x;\n * }\n *\n * // Call was okay.\n * const attempt(assertIsPositive, [1]); // => 1;\n *\n * // Call threw, but no fallback value was given.\n * const attempt(assertIsPositive, [-1]); => Error('x must be a positive number');\n *\n * // Call threw, fallback was returned.\n * const attempt(assertIsPositive, [-1], 'fallback'); => 'fallback';\n *\n * // Call threw, don't care about fallback, but don't want an error either.\n * const attempt(assertIsPositive, [-1], 0); => 0;\n *\n */\nexport default function attempt(fn, args, fallback) {\n  try {\n    return fn.apply(undefined, isObject(args) ? args : undefined);\n  } catch (e) {\n    return arguments.length > 2 ? fallback : e;\n  }\n}\n"]}