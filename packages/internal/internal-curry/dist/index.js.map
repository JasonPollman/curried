{"version":3,"sources":["index.js"],"names":["ARITY","SOURCE","IS_CURRIED","_","toStringForCurried","concat","toString","unary","fn","curried","a","arguments","length","binary","b","c","trinary","d","e","quarternary","f","g","prev","curr","args","plen","clen","i","index","hasPlaceholders","arity","recurry","context","apply","nary","OPTIMIZED","curry","optimized"],"mappings":"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","sourceRoot":"packages/internal/internal-curry","sourcesContent":["/**\n * A *highly* optimized currying library focused on performance.\n * Support for partial applications and placeholders.\n * Supported by node and browsers (at least IE11+).\n * @since 10/3/18\n * @file\n */\n\nimport SafeSymbolFor from '@foldr/internal-symbol';\n\n/* eslint-disable prefer-spread, no-param-reassign, no-nested-ternary */\n\n/**\n * Used to track the arity of curried functions.\n * @type {SafeSymbol}\n */\nexport const ARITY = SafeSymbolFor('source-arity');\n\n/**\n * Used to map curried functions back to their original.\n * @type {SafeSymbol}\n */\nexport const SOURCE = SafeSymbolFor('source-fn');\n\n/**\n * Signals that this is a curried function.\n * @type {SafeSymbol}\n */\nexport const IS_CURRIED = SafeSymbolFor('is-curried-fn');\n\n/**\n * A default placeholder value.\n * Used for partial application to curried functions.\n * @type {SafeSymbol}\n */\nexport const _ = SafeSymbolFor('placeholder');\n\n/**\n * The `toString` implementation for curried functions.\n * This will print the original function's source string\n * prepended with a friendly message that the function is curried.\n * @returns {string} The source function's code with a comment\n * informing the user that the function is curried.\n */\nfunction toStringForCurried() {\n  return '/* Curry Wrapped */\\r\\n'.concat(this[SOURCE].toString());\n}\n\n/**\n * Optimized unary curry function.\n * @param {function} fn The source (original) function.\n * @returns {function} The curried function\n */\nfunction unary(fn) {\n  return function curried(a) {\n    return arguments.length && a !== _ ? fn(a) : curried;\n  };\n}\n\n/**\n * Optimized binary curry function.\n * @param {function} fn The source (original) function.\n * @returns {function} The curried function\n */\nfunction binary(fn) {\n  return function curried(a, b) {\n    switch (arguments.length) {\n      case 2:\n      default: return a === _\n        ? b === _\n          ? curried\n          : unary(c => fn(c, b))\n        : b === _\n          ? unary(c => fn(a, c))\n          : fn(a, b);\n\n      case 1: return a === _ ? curried : unary(c => fn(a, c));\n      case 0: return curried;\n    }\n  };\n}\n\n/**\n * Optimized trinary curry function.\n * @param {function} fn The source (original) function.\n * @returns {function} The curried function\n */\nfunction trinary(fn) {\n  return function curried(a, b, c) {\n    switch (arguments.length) {\n      case 3:\n      default: return a === _\n        ? b === _\n          ? c === _\n            ? curried\n            : binary((d, e) => fn(d, e, c))\n          : c === _\n            ? binary((d, e) => fn(d, b, e))\n            : unary(d => fn(d, b, c))\n        : b === _\n          ? c === _\n            ? binary((d, e) => fn(a, d, e))\n            : unary(d => fn(a, d, c))\n          : c === _\n            ? unary(d => fn(a, b, d))\n            : fn(a, b, c);\n\n      case 2: return a === _\n        ? b === _\n          ? curried\n          : binary((d, e) => fn(d, b, e))\n        : b === _\n          ? binary((d, e) => fn(a, d, e))\n          : unary(d => fn(a, b, d));\n\n      case 1: return a === _ ? curried : binary((d, e) => fn(a, d, e));\n      case 0: return curried;\n    }\n  };\n}\n\n/**\n * Optimized quarternary curry function.\n * @param {function} fn The source (original) function.\n * @returns {function} The curried function\n */\nfunction quarternary(fn) {\n  return function curried(a, b, c, d) {\n    switch (arguments.length) {\n      case 4:\n      default: return a === _\n        ? b === _\n          ? c === _\n            ? d === _\n              ? curried\n              : trinary((e, f, g) => fn(e, f, g, d))\n            : d === _\n              ? trinary((e, f, g) => fn(e, f, c, g))\n              : binary((e, f) => fn(e, f, c, d))\n          : c === _\n            ? d === _\n              ? trinary((e, f, g) => fn(e, b, f, g))\n              : binary((e, f) => fn(e, b, f, d))\n            : d === _\n              ? binary((e, f) => fn(e, b, c, f))\n              : unary(e => fn(e, b, c, d))\n        : b === _\n          ? c === _\n            ? d === _\n              ? trinary((e, f, g) => fn(a, e, f, g))\n              : binary((e, f) => fn(a, e, f, d))\n            : d === _\n              ? binary((e, f) => fn(a, e, c, f))\n              : unary(e => fn(a, e, c, d))\n          : c === _\n            ? d === _\n              ? binary((e, f) => fn(a, b, e, f))\n              : unary(e => fn(a, b, e, d))\n            : d === _\n              ? unary(e => fn(a, b, c, e))\n              : fn(a, b, c, d);\n\n      case 3: return a === _\n        ? b === _\n          ? c === _\n            ? curried\n            : trinary((e, f, g) => fn(e, f, c, g))\n          : c === _\n            ? trinary((e, f, g) => fn(e, b, f, g))\n            : binary((e, f) => fn(e, b, c, f))\n        : b === _\n          ? c === _\n            ? trinary((e, f, g) => fn(a, e, f, g))\n            : binary((e, f) => fn(a, e, c, f))\n          : c === _\n            ? binary((e, f) => fn(a, b, e, f))\n            : unary(e => fn(a, b, c, e));\n\n      case 2: return a === _\n        ? b === _\n          ? curried\n          : trinary((e, f, g) => fn(e, b, f, g))\n        : b === _\n          ? trinary((e, f, g) => fn(a, e, f, g))\n          : binary((e, f) => fn(a, b, e, f));\n\n      case 1: return a === _ ? curried : trinary((e, f, g) => fn(a, e, f, g));\n      case 0: return curried;\n    }\n  };\n}\n\n/**\n * Gets the next argument set in the curry sequence. This will\n * combine the previous and current argument set, while replacing\n * placeholders in the previous set with values from the current.\n * @param {Array|Arguments} prev The previous function invocation's arguments.\n * @param {Arguments} curr The current function invocation's arguments.\n * @returns {Array} The \"concatenated\" arguments.\n */\nfunction concat(prev, curr) {\n  const args = [];\n  const plen = prev.length;\n  const clen = curr.length;\n\n  let i = -1;\n  let index = 0;\n\n  while (++i < plen) {\n    args[i] = prev[i] === _ && index < clen ? curr[index++] : prev[i];\n  }\n\n  while (index < clen) {\n    args[i++] = curr[index++];\n  }\n\n  return args;\n}\n\n/**\n * Determines if an argument set has any placeholders (up to arity), which\n * indicates that it's not safe to invoke the curried function's source function.\n * @param {Array|Arguments} args The argument set to look for placeholders within.\n * @param {number} arity The arity of the source function.\n * @returns {boolean} True if it's safe to call the source functon, false otherwise.\n */\nfunction hasPlaceholders(args, arity) {\n  while (--arity !== -1) if (args[arity] === _) return true;\n  return false;\n}\n\n/**\n * Used by `nary` below to recursively complete the curry sequence.\n * @param {function} fn The source (original) function.\n * @param {number} arity The arity to curry `fn` to.\n * @param {Arguments|Array} prev The previous arguments in the curry sequence.\n * @param {any} context The context from the initial invocation.\n * @returns {function} The next function in the curry sequence.\n */\nfunction recurry(fn, arity, prev, context) {\n  return function curried() {\n    if (!arguments.length) return curried;\n    const args = concat(prev, arguments);\n\n    return args.length < arity || hasPlaceholders(args, arity)\n      ? recurry(fn, arity, args, context)\n      : fn.apply(context, args);\n  };\n}\n\n/**\n * Used to curry functions with an arity > 4.\n * @param {function} fn The source (original) function.\n * @param {number} arity The arity to curry `fn` to.\n * @returns {function} The curried version of `fn`.\n */\nfunction nary(fn, arity) {\n  return function curried() {\n    const args = arguments;\n\n    return args.length < arity || hasPlaceholders(args, arity)\n      ? recurry(fn, arity, args, this)\n      : fn.apply(this, args);\n  };\n}\n\nconst OPTIMIZED = [unary, unary, binary, trinary, quarternary];\n\n/**\n * Curries a function.\n * @param {function} fn The function to curry.\n * @param {number} [options.arity=fn.length] The arity of `fn` or\n * a specific arity override to curry `fn` to.\n * @returns {function} The curried version of `fn`.\n * @export\n * @example\n * const curried = curry((x, y, z) => x + y + z);\n * curried()        // => curried\n * curried(1)       // => [object Function]\n * curried(1)(2)    // => [object Function]\n * curried(1)(2)(3) // => 6\n * curried(1, 2)(3) // => 6\n * curried(1)(2, 3) // => 6\n * curried(1, 2, 3) // => 6\n *\n * // You can also use partial application (placeholders)...\n * const triples = curry((a, b, c) => [a, b, c]);\n * triples(_, 2, 3)(1)    // => [1, 2, 3]\n * triples(_, _, 3)(1)(2) // => [1, 2, 3]\n * triples(1)(_)(2)(_)(3) // => [1, 2, 3]\n * triples(1)(_, 3)(2)    // => [1, 2, 3]\n * triples(_, 2)(1)(3)    // => [1, 2, 3]\n */\nexport default function curry(fn, { arity = fn[ARITY], optimized = true } = {}) {\n  if (arity === undefined) arity = fn.length;\n  if (arity < 1) return fn;\n\n  const curried = (optimized ? (OPTIMIZED[arity] || nary) : nary)(fn, arity);\n\n  curried[ARITY] = arity;\n  curried[SOURCE] = fn;\n  curried[IS_CURRIED] = true;\n  curried.toString = toStringForCurried;\n\n  return curried;\n}\n\ncurry._ = _;\n"]}