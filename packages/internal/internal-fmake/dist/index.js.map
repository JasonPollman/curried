{"version":3,"sources":["index.js"],"names":["has","Object","hasOwnProperty","identity","x","functionalize","fn","config","context","curried","signature","binding","method","bind","curry","FunctionalFactory","options","make","overrides","merged","optimized","call","functional","namespace"],"mappings":"u1BAcMA,CAAAA,GAAG,CAAGC,MAAM,CAACC,c,CACbC,QAAQ,CAAG,SAAAC,CAAC,QAAIA,CAAAA,CAAJ,C,CAQX,QAASC,CAAAA,aAAT,CAAuBC,CAAvB,CAA2BC,CAA3B,CAAmC,IAEtCC,CAAAA,CAFsC,CAKpCD,CALoC,CAEtCC,OAFsC,CAGtCC,CAHsC,CAKpCF,CALoC,CAGtCE,OAHsC,CAItCC,CAJsC,CAKpCH,CALoC,CAItCG,SAJsC,CAOlCC,CAAO,CAAe,QAAZ,GAAAH,CAAO,CAAgBD,CAAhB,CAAyBC,CAPR,CAQlCI,CAAM,CAAGD,CAAO,SAAP,CAAwBL,CAAxB,CAA6BA,CAAE,CAACO,IAAH,CAAQF,CAAR,CARJ,CAUxC,MAAO,CAACF,CAAO,CAAGK,sBAAH,CAAWX,QAAnB,EAA6BO,CAAS,CAAG,2BAAME,CAAN,CAAcF,CAAd,CAAH,CAA8BE,CAApE,CAA4EL,CAA5E,CACR,CAmBc,QAASQ,CAAAA,iBAAT,CAA2BT,CAA3B,CAA+BU,CAA/B,CAAwC,CACrD,GAAMT,CAAAA,CAAM,gBAAKE,OAAO,GAAZ,EAAuBO,CAAvB,CAAZ,CASA,QAASC,CAAAA,CAAT,CAAcC,CAAd,CAAyB,CACvB,GAAMC,CAAAA,CAAM,kBAAQZ,CAAR,CAAmBW,CAAnB,CAAZ,CAIAC,CAAM,CAACC,SAAP,CAAmBpB,GAAG,CAACqB,IAAJ,CAASF,CAAT,CAAiB,SAAjB,KAAsCA,CAAM,CAACC,SAAhE,CACA,MAAOf,CAAAA,aAAa,CAACC,CAAD,CAAKa,CAAL,CACrB,CAED,GAAMG,CAAAA,CAAU,CAAGL,CAAI,CAACX,CAAD,CAAK,EAAL,CAAvB,CAEAA,CAAE,CAACW,IAAH,CAAUA,CAAV,CACAX,CAAE,CAACC,CAAM,CAACgB,SAAP,EAAoB,GAArB,CAAF,CAA8BD,CAA9B,CAEA,MAAOA,CAAAA,CACR","sourceRoot":"packages/internal/internal-fmake","sourcesContent":["/**\n * Exports a function that creates functional versions of\n * the given function. This is used to create fp versions\n * of all @foldr functions. Note, changing this file will\n * affect all @foldr methods!\n * @since 11/15/18\n * @file\n */\n\nimport curry from '@foldr/internal-curry';\nimport rearg from '@foldr/internal-rearg';\n\n/* eslint-disable no-param-reassign */\n\nconst has = Object.hasOwnProperty;\nconst identity = x => x;\n\n/**\n * Creates a function version of `fn` using `config`.\n * @param {function} fn The function to functionalize.\n * @param {Object} config The configuration (as documented below).\n * @returns {function} The functional version of `fn`.\n */\nexport function functionalize(fn, config) {\n  const {\n    context,\n    curried,\n    signature,\n  } = config;\n\n  const binding = context === 'config' ? config : context;\n  const method = binding === undefined ? fn : fn.bind(binding);\n\n  return (curried ? curry : identity)(signature ? rearg(method, signature) : method, config);\n}\n\n/**\n * Creates a function version of `fn` using `options` and assigns it to\n * `fn` using `options.namespace`. This will also add a `functionalize`\n * method to the function, which users can use to create *new* functional\n * versions of `fn` with their own config.\n * @param {function} fn The function to functionalize/wrap.\n * @param {Object} options Functionalization options.\n * @param {boolean=} [capped=true] Set to `false` to prevent iterators from passing\n * more than a single (value) argument to iteratee functions.\n * @param {curried=} [curried=true] True to curry the function, false otherwise.\n * @param {string=} [namespace='fn'] The \"namespace\" to assign the functional\n * version of `fn` onto `fn` using.\n * @param {number=} arity See the docs on this parameter in `internal-curry`.\n * @param {boolean=} optimized See the docs on this parameter in `internal-curry`.\n * @returns {function} The function version of `fn`.\n * @export\n */\nexport default function FunctionalFactory(fn, options) {\n  const config = { curried: true, ...options };\n\n  /**\n   * Allows users to create custom functionalized versions of the provided function.\n   * This will create a new function using `fn` as the base.\n   * @param {Object} overrides The list of configuration\n   * overrides to apply the the new function.\n   * @returns {function} The functionalized version of `fn`.\n   */\n  function make(overrides) {\n    const merged = { ...config, ...overrides };\n\n    // Aliasing this to make more sense to the end user.\n    // Note, this option is passed to curry's options.\n    merged.optimized = has.call(merged, 'context') ? false : merged.optimized;\n    return functionalize(fn, merged);\n  }\n\n  const functional = make(fn, {});\n\n  fn.make = make;\n  fn[config.namespace || 'f'] = functional;\n\n  return functional;\n}\n"]}