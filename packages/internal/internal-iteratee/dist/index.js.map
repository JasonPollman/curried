{"version":3,"sources":["index.js"],"names":["keys","Object","isEqual","x","y","identity","T","iterateeForString","prop","value","iterateeForObject","object","props","size","length","i","iterateeForArray","tuple","getShorthandIteratee","given","constructor","Function","Array","String"],"mappings":"4GAMQA,CAAAA,I,CAASC,M,CAATD,I,CAIFE,OAAO,CAAG,SAACC,CAAD,CAAIC,CAAJ,QAAWD,CAAAA,CAAC,GAAKA,CAAN,CAAUA,CAAC,GAAKC,CAAhB,CAAoBA,CAAC,GAAKA,CAArC,C,CAQhB,QAASC,CAAAA,QAAT,CAAkBF,CAAlB,CAAqB,CACnB,MAAOA,CAAAA,CACR,CAMD,QAASG,CAAAA,CAAT,EAAa,CACX,QACD,CAOD,QAASC,CAAAA,iBAAT,CAA2BC,CAA3B,CAAiC,CAC/B,MAAO,UAAAC,CAAK,QAAKA,CAAAA,CAAK,CAAGA,CAAK,CAACD,CAAD,CAAR,OAAV,CACb,CAQD,QAASE,CAAAA,iBAAT,CAA2BC,CAA3B,CAAmC,IAC3BC,CAAAA,CAAK,CAAGZ,IAAI,CAACW,CAAD,CADe,CAE3BE,CAAI,CAAGD,CAAK,CAACE,MAFc,CAMjC,GAAI,CAACD,CAAL,CAAW,MAAOP,CAAAA,CAAP,CAEX,MAAO,UAACG,CAAD,CAAW,CAChB,GAAI,CAACA,CAAL,CAAY,SADI,GAGZM,CAAAA,CAAC,CAAG,CAHQ,CAIZP,CAJY,CAMhB,MAAOO,CAAC,CAAGF,CAAX,CAAiB,CACfL,CAAI,CAAGI,CAAK,CAACG,CAAC,EAAF,CAAZ,CACA,GAAI,CAACb,OAAO,CAACO,CAAK,CAACD,CAAD,CAAN,CAAcG,CAAM,CAACH,CAAD,CAApB,CAAZ,CAAyC,QAC1C,CAED,QACD,CACF,CASD,QAASQ,CAAAA,gBAAT,CAA0BC,CAA1B,CAAiC,CAC/B,GAAI,CAACA,CAAK,CAACH,MAAX,CAAmB,MAAOR,CAAAA,CAAP,CACnB,MAAO,UAAAH,CAAC,QAAI,CAAC,CAACA,CAAF,EAAOD,OAAO,CAACC,CAAC,CAACc,CAAK,CAAC,CAAD,CAAN,CAAF,CAAcA,CAAK,CAAC,CAAD,CAAnB,CAAlB,CACT,CASc,QAASC,CAAAA,oBAAT,CAA8BC,CAA9B,CAAqC,CAClD,GAAI,CAACA,CAAL,CAAY,MAAOd,CAAAA,QAAP,CAEZ,OAAQc,CAAK,CAACC,WAAd,EACE,IAAKC,CAAAA,QAAL,CAAe,MAAOF,CAAAA,CAAP,CACf,IAAKG,CAAAA,KAAL,CAAY,MAAON,CAAAA,gBAAgB,CAACG,CAAD,CAAvB,CACZ,IAAKI,CAAAA,MAAL,CAAa,MAAOhB,CAAAA,iBAAiB,CAACY,CAAD,CAAxB,CACb,IAAKlB,CAAAA,MAAL,CAAa,MAAOS,CAAAA,iBAAiB,CAACS,CAAD,CAAxB,CACb,QAAS,MAAOd,CAAAA,QAAP,CALX,CAOD","sourceRoot":"packages/internal/internal-iteratee","sourcesContent":["/**\n * This file exports a function that gets \"shorthand\" iteratees.\n * @since 11/11/18\n * @file\n */\n\nconst { keys } = Object;\n\n// SameValueZero comparison.\n// eslint-disable-next-line no-self-compare\nconst isEqual = (x, y) => (x === x ? x === y : y !== y);\n\n/**\n * The identity function.\n * Returns the value of the first argument provided to it.\n * @param {any} x The value to passthrough.\n * @returns {any} The value of `x`.\n */\nfunction identity(x) {\n  return x;\n}\n\n/**\n * Always returns true.\n * @returns {boolean} Literally `true`.\n */\nfunction T() {\n  return true;\n}\n\n/**\n * Shorthand iteratee for string iteratees.\n * @param {string} prop The property to extract from the value.\n * @returns {function} The string shorthand iteratee.\n */\nfunction iterateeForString(prop) {\n  return value => (value ? value[prop] : undefined);\n}\n\n/**\n * Shorthand iteratee for object iteratees.\n * @param {Object} object An object who's property values should be the same\n * as the current value in the iteration.\n * @returns {function} The object shorthand iteratee.\n */\nfunction iterateeForObject(object) {\n  const props = keys(object);\n  const size = props.length;\n\n  // Nothing to assert the predicate of, so\n  // everything always passes this iteratee.\n  if (!size) return T;\n\n  return (value) => {\n    if (!value) return false;\n\n    let i = 0;\n    let prop;\n\n    while (i < size) {\n      prop = props[i++];\n      if (!isEqual(value[prop], object[prop])) return false;\n    }\n\n    return true;\n  };\n}\n\n/**\n * Shorthand iteratee for array iteratees.\n * @param {Array} tuple An array who's first index is the property\n * to peel of the current iteration value and who's second index is the\n * value that the first index should be.\n * @returns {function} The array shorthand iteratee.\n */\nfunction iterateeForArray(tuple) {\n  if (!tuple.length) return T;\n  return x => !!x && isEqual(x[tuple[0]], tuple[1]);\n}\n\n/**\n * Gets a \"shorthand\" iteratee function. That is, if the user\n * provides a string, object, or array\n * @param {Array|Object|string|function} given The value provided for the iteratee function.\n * @returns {function} The relevant iteratee function based on `given`.\n * @export\n */\nexport default function getShorthandIteratee(given) {\n  if (!given) return identity;\n\n  switch (given.constructor) {\n    case Function: return given;\n    case Array: return iterateeForArray(given);\n    case String: return iterateeForString(given);\n    case Object: return iterateeForObject(given);\n    default: return identity;\n  }\n}\n"]}