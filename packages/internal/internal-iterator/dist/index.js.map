{"version":3,"sources":["index.js"],"names":["identity","x","keys","Object","toString","prototype","BREAK","iterateArrayLike","context","results","array","handler","iteratee","size","length","i","iterateArrayLikeReverse","n","iterateObject","object","props","key","iterateObjectReverse","iterateSet","set","iteratorForEntries","entries","next","done","value","iterateSetReverse","iterateMap","map","iterateMapReverse","ITERATOR_MAPPING","ITERATOR_MAPPING_REVERSE","iteratorFromOptions","$$empty","$$results","$$unwrap","$$handler","$$prepare","mapping","arrayIterator","collection","userIteratee","initial","iterate","call","IteratorFactory","options","$$reverse"],"mappings":"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","sourceRoot":"packages/internal/internal-iterator","sourcesContent":["/**\n * This file exports a \"factory\" function for creating\n * various types of iterator functions used by `map`, `filter`, etc.\n * @since 11/10/18\n * @file\n */\n\nimport SafeSymbolFor from '@foldr/internal-symbol';\n\nconst identity = x => x;\nconst { keys } = Object;\nconst { toString } = Object.prototype;\n\n/**\n * A sential value used to break iteration.\n * @type {SafeSymbol}\n */\nexport const BREAK = SafeSymbolFor('iterator-break');\n\n/**\n * Iterates over array-like objects (Arrays, Arguments, and strings).\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Array|Arguments|string} array The array-like object we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateArrayLike(context, results, array, handler, iteratee) {\n  const size = array.length;\n  let i = 0;\n\n  while (i < size) {\n    if (handler(context, results, iteratee, i, array[i], i++, array) === BREAK) break;\n  }\n}\n\n/**\n * Iterates over array-like objects (Arrays, Arguments, and strings) in reverse.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Array|Arguments|string} array The array-like object we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateArrayLikeReverse(context, results, array, handler, iteratee) {\n  let i = array.length;\n  let n = 0;\n\n  while (--i >= 0) {\n    if (handler(context, results, iteratee, n++, array[i], i, array) === BREAK) break;\n  }\n}\n\n/**\n * Iterates over Objects.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Object} object The object we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateObject(context, results, object, handler, iteratee) {\n  const props = keys(object);\n  const size = props.length;\n\n  let key;\n  let i = 0;\n\n  while (i < size) {\n    key = props[i];\n    if (handler(context, results, iteratee, i++, object[key], key, object) === BREAK) break;\n  }\n}\n\n/**\n * Iterates over Objects in reverse.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Object} object The object we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateObjectReverse(context, results, object, handler, iteratee) {\n  const props = keys(object);\n\n  let key;\n  let i = props.length;\n  let n = 0;\n\n  while (--i >= 0) {\n    key = props[i];\n    if (handler(context, results, iteratee, n++, object[key], key, object) === BREAK) break;\n  }\n}\n\n/**\n * Iterates over Set instances.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Set} set The Set that we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateSet(context, results, set, handler, iteratee) {\n  let i = 0;\n\n  const iteratorForEntries = set.entries();\n  let next = iteratorForEntries.next();\n\n  while (!next.done) {\n    if (handler(context, results, iteratee, i, next.value[0], i++, set) === BREAK) break;\n    next = iteratorForEntries.next();\n  }\n}\n\n/**\n * Iterates over Set instances in reverse.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Set} set The Set that we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateSetReverse(context, results, set, handler, iteratee) {\n  const entries = [];\n  const iteratorForEntries = set.entries();\n\n  let n = 0;\n  let next = iteratorForEntries.next();\n\n  while (!next.done) {\n    entries[n++] = next.value;\n    next = iteratorForEntries.next();\n  }\n\n  let i = entries.length;\n  n = 0;\n\n  while (--i >= 0) {\n    if (handler(context, results, iteratee, n++, entries[i][0], i, set) === BREAK) break;\n    next = iteratorForEntries.next();\n  }\n}\n\n/**\n * Iterates over Map instances.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Map} map The Map that we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateMap(context, results, map, handler, iteratee) {\n  let i = 0;\n\n  const iteratorForEntries = map.entries();\n  let next = iteratorForEntries.next();\n\n  while (!next.done) {\n    if (handler(context, results, iteratee, i++, next.value[1], next.value[0], map) === BREAK) {\n      break;\n    }\n\n    next = iteratorForEntries.next();\n  }\n}\n\n/**\n * Iterates over Map instances in reverse.\n * @param {any} context The `this` binding to pass to the handler.\n * @param {Array|Object} results The results set that iteration will \"fill\".\n * @param {Set} set The Map that we're iterating over.\n * @param {function} handler The wrapper handler.\n * @param {function} iteratee The user provided iteratee function.\n * @returns {undefined}\n */\nfunction iterateMapReverse(context, results, set, handler, iteratee) {\n  const entries = [];\n  const iteratorForEntries = set.entries();\n\n  let n = 0;\n  let next = iteratorForEntries.next();\n\n  while (!next.done) {\n    entries[n++] = next.value;\n    next = iteratorForEntries.next();\n  }\n\n  let i = entries.length;\n  n = 0;\n\n  while (--i >= 0) {\n    if (handler(context, results, iteratee, n++, entries[i][1], entries[i][0], set) === BREAK) {\n      break;\n    }\n\n    next = iteratorForEntries.next();\n  }\n}\n\n/**\n * A mapping of Object.prototype.toString tags to iterator functions.\n * This object is used to determine the function to use to iterate over\n * the user-provided collection.\n * @type {Object<function>}\n */\nconst ITERATOR_MAPPING = {\n  '[object Set]': iterateSet,\n  '[object Map]': iterateMap,\n  '[object Array]': iterateArrayLike,\n  '[object String]': iterateArrayLike,\n  '[object Object]': iterateObject,\n  '[object Arguments]': iterateArrayLike,\n};\n\n/**\n * A mapping of Object.prototype.toString tags to iterator functions.\n * This object is used to determine the function to use to iterate over\n * the user-provided collection if the `reverse` option is true.\n * @type {Object<function>}\n */\nconst ITERATOR_MAPPING_REVERSE = {\n  '[object Set]': iterateSetReverse,\n  '[object Map]': iterateMapReverse,\n  '[object Array]': iterateArrayLikeReverse,\n  '[object String]': iterateArrayLikeReverse,\n  '[object Object]': iterateObjectReverse,\n  '[object Arguments]': iterateArrayLikeReverse,\n};\n\n/**\n * Creates an iterator function that iterates either forward or reverse\n * depending on the values of `options.mapping`.\n * @param {Object} options Iterator function options.\n * @param {function} options.mapping One of the `ITERATOR_MAPPING` or\n * `ITERATOR_MAPPING_REVERSE` objects above.\n * internally invoke the user's `iteratee` passed to it.\n * @param {function} options.$$handler A handler function to perform internal\n * actions for each item in the collection as it's iterated. This function should\n * internally invoke the user's `iteratee` passed to it.\n * @param {function} options.$$results A constructor function that creates\n * the results object that's passed to `handler` on each iteration.\n * @param {function=} [options.$$unwrap=false] If true, this function will\n * be called on the final results and the return value from it will be returned\n * to the end-user.\n * @returns {any} The results from iterating over `collection` using `iteratee`.\n * @export\n */\nfunction iteratorFromOptions({\n  $$empty,\n  $$results,\n  $$unwrap,\n  $$handler,\n  $$prepare,\n  mapping,\n  arrayIterator,\n}) {\n  return function iterator(collection, userIteratee, initial) {\n    if (!collection) return $$empty(initial);\n\n    let iteratee = $$prepare ? $$prepare(userIteratee) : userIteratee;\n    if (typeof iteratee !== 'function') iteratee = identity;\n\n    // This is an optimization, since most \"iterator\" functions iterate\n    // over array-like objects, this prevents the `toString.apply` call\n    // for arrays, strings, and arguments objects.\n    const iterate = collection.length >= 0 ? arrayIterator : mapping[toString.call(collection)];\n    const results = $$results(initial);\n\n    (iterate || mapping['[object Object]'])(this, results, collection, $$handler, iteratee);\n    return $$unwrap ? $$unwrap(results) : results;\n  };\n}\n\n/**\n * Creates an iterator function.\n * @param {Object} options Iterator function options.\n * @param {boolean} options.flipped If true, a functional-style iteratee first\n * function will be returned. Otherwise, the more standard collection first version\n * of the iterator function will be returned.\n * @param {function} options.handler A handler function to perform internal\n * actions for each item in the collection as it's iterated. This function should\n * internally invoke the user's `iteratee` passed to it.\n * @param {boolean=} [options.$$reverse=false] If true, collections will be iterated\n * over in reverse order.\n * @returns {any} The results from iterating over `collection` using `iteratee`.\n * @export\n */\nexport default function IteratorFactory(options) {\n  return iteratorFromOptions({\n    ...options,\n\n    mapping: options.$$reverse\n      ? ITERATOR_MAPPING_REVERSE\n      : ITERATOR_MAPPING,\n\n    arrayIterator: options.$$reverse\n      ? iterateArrayLikeReverse\n      : iterateArrayLike,\n  });\n}\n\nIteratorFactory.BREAK = BREAK;\n"]}