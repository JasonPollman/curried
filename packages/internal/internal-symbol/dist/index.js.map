{"version":3,"sources":["index.js"],"names":["prefix","MakeSafeSymbol","registry","Symbol","label","value","valueOf","toString","for","SafeSymbol","getUnprefixedSymbol","getPrefixedSymbol","concat"],"mappings":"sNAIA,GAAMA,CAAAA,MAAM,CAAG,UAAf,CAUO,QAASC,CAAAA,cAAT,EAA0B,CAC/B,GAAMC,CAAAA,CAAQ,CAAG,EAAjB,CAEA,QAASC,CAAAA,CAAT,CAAgBC,CAAhB,CAAuB,CACrB,GAAMC,CAAAA,CAAK,aAAQD,CAAR,CAAX,CAEA,MAAO,CACLE,OADK,aACK,CACR,MAAOD,CAAAA,CACR,CAHI,CAILE,QAJK,aAIM,CACT,MAAO,MAAKD,OAAL,EACR,CANI,CAQR,CAEDH,CAAM,CAACK,GAAP,CAAa,SAAmBJ,CAAnB,CAA0B,CACrCF,CAAQ,CAACE,CAAD,CAAR,CAAkBF,CAAQ,CAACE,CAAD,CAAR,EAAmBD,CAAM,CAACC,CAAD,CAA3C,CACA,MAAOF,CAAAA,CAAQ,CAACE,CAAD,CAChB,CAHD,CAKA,MAAOD,CAAAA,CACR,CAEM,GAAMM,CAAAA,UAAU,CAAqB,UAAlB,QAAON,CAAAA,MAAP,CAA+BA,MAA/B,CAAmEF,cAAc,EAApG,C,8BASA,QAASS,CAAAA,mBAAT,CAA6BN,CAA7B,CAAoC,CACzC,MAAOK,CAAAA,UAAU,CAACL,CAAD,CAAV,EAAqBK,UAAU,CAACD,GAAX,CAAeJ,CAAf,CAC7B,CASc,QAASO,CAAAA,iBAAT,CAA2BP,CAA3B,CAAkC,CAC/C,MAAOK,CAAAA,UAAU,CAACD,GAAX,CAAeR,MAAM,CAACY,MAAP,CAAcR,CAAd,CAAf,CACR","sourceRoot":"packages/internal/internal-symbol","sourcesContent":["/**\n * The prefix to apply to *all internal* symbols.\n * @type {string}\n */\nconst prefix = '@@foldr/';\n\n/* eslint-disable require-jsdoc */\n\n/**\n * Makes a \"Symbol-like\" polyfill used for internal use only.\n * Exporting this for testing purposes only. Note, this will only be used in\n * the event that native Symbols aren't avaiable (env is IE11, for example).\n * @returns {function} A \"SafeSymbol\" factory function.\n */\nexport function MakeSafeSymbol() {\n  const registry = {};\n\n  function Symbol(label) {\n    const value = `@@${label}`;\n\n    return {\n      valueOf() {\n        return value;\n      },\n      toString() {\n        return this.valueOf();\n      },\n    };\n  }\n\n  Symbol.for = function SymbolFor(label) {\n    registry[label] = registry[label] || Symbol(label);\n    return registry[label];\n  };\n\n  return Symbol;\n}\n\nexport const SafeSymbol = typeof Symbol === 'function' ? Symbol : /* istanbul ignore next */ MakeSafeSymbol();\n\n/**\n * Calls SafeSymbol.for to get/register a symbol with the given `label`.\n * If runtime is IE11, this will create a new \"fake\" symbol with '@@' prefixed.\n * @param {string} label The symbol's label.\n * @returns {Symbol|string} The symbol or pseudo symbol.\n * @export\n */\nexport function getUnprefixedSymbol(label) {\n  return SafeSymbol[label] || SafeSymbol.for(label);\n}\n\n/**\n * Calls SafeSymbol.for to get/register a Symbol that\n * will always contain the label prefix \"@@foldr/\".\n * @param {string} label The symbol's label.\n * @returns {Symbol|SafeSymbol} The Symbol or SafeSymbol instance.\n * @export\n */\nexport default function getPrefixedSymbol(label) {\n  return SafeSymbol.for(prefix.concat(label));\n}\n"]}